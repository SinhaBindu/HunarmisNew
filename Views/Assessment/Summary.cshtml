@model  Hunarmis.Models.FilterModel
@using Hunarmis.Manager
@*@model IEnumerable<KGBV_JH.Models.QesRes>*@
@{
    ViewBag.Title = "Assessment Score";
    ViewBag.TitleIcon = "fa fa-user";
    ViewBag.SemiTitle = "(Add)";
    ViewBag.SemiTitleLink = "/Assessment/Add";

}
<style>
    .panel-body {
        padding: 0px 20px 5px;
    }
</style>
<div id="page-content">
    <div class="genral-form">
        <div class="row">
            <div class="col-lg-12">
                <div class="panel">
                    <div class="panel-spacer">
                        <p class="bord-btm pad-ver text-main text-bold">
                            <i class="fa fa-list spacerright2"></i>@ViewBag.Title <strong id="sg-title" class="text-info"></strong>
                        </p>
                    </div>
                    @using (Html.BeginForm("GetSummary", "Competency", FormMethod.Post, new { @id = "formid", @class = "panel-body form-horizontal form-padding loader" }))
                    {
                        <div class="panel-bodys">
                            <div class="bg-light rounded h-100 p-4">
                                <div class="row mb-3">
                                    <div class="col-md-4">
                                        <div class="position-relative form-group">
                                            @Html.LabelFor(m => m.FormId, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(m => m.FormId, new List<SelectListItem>(), null, htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.FormId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="col-md-4">
                                        <div class="position-relative form-group">
                                            @Html.LabelFor(m => m.BatchId, htmlAttributes: new { @class = "control-label" })
                                            @Html.DropDownListFor(m => m.BatchId, new List<SelectListItem>(), null, htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.BatchId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                    }
                    <div class="col-md-12">@Html.Partial("_Alerts")</div>
                    <div class="panel-body">
                        <div class="row" id="div-main">
                        </div>
                    </div>
                    <hr />
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-sm-12" id="ChartSummary" style="height:2000px;">

                            </div>
                            <div class="col-sm-3" id="divquest" style="font-size: 12px; font-weight: bold; color: #9133a1"></div>
                            <div class="col-sm-9" id="ChartSummary1">

                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>

@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script src="https://code.highcharts.com/highcharts.js"></script>
    <script src="https://code.highcharts.com/modules/exporting.js"></script>
    <script src="https://code.highcharts.com/modules/export-data.js"></script>
    @*<script src="https://code.highcharts.com/modules/accessibility.js"></script>*@

    <script src="https://code.highcharts.com/highcharts-more.js"></script>
    <script src="https://code.highcharts.com/modules/coloraxis.js"></script>
    <script src="~/Scripts/Custom/Master.js"></script>
    <script src="~/Scripts/App/ChartSummary1.js"></script>

    <script>
     $(document).ready(function () {

        BindGetCourses("FormId", "", 0, 0);
        var txt = $('option:selected', $('#FormId')).text();
        $('#sg-title').html(txt);
          //  GetSummaryData();
           // GetPackedbubbleData();
    $('#FormId').change(function () {
        BindModuleWiseBatches("BatchId", "", 2, '@((int)Enums.ModuleBatches.Assessment)', $(this).val(), 0)
        var txt = $('option:selected', $(this)).text();
        var txt1 = $('option:selected', $('#BatchId')).text();
        $('#sg-title').html(txt + " / " + txt1);
        GetSummaryData();
    })
    $('#BatchId').change(function () {
        var txt = $('option:selected', $('#FormId')).text();
        var txt1 = $('option:selected', $('#BatchId')).text();
        $('#sg-title').html(txt + " / " + txt1);
        GetSummaryData();
    })

});

function GetSummaryData() {
    $('#ChartSummary').html('');
    var txt = $('option:selected', $('#FormId')).text();
    var txt1 = $('option:selected', $('#BatchId')).text();
    var formData = $('#formid').serialize();
    var User = 'all';
    var FormId = $("#FormId").val();
    var BatchId = $("#BatchId").val();
    $.ajax({
        type: "GET",
        url: document.baseURI + "/assessment/GetSummary",
        data: { 'User': User, 'FormId': FormId, 'BatchId': BatchId },
        success: function (resp) {
            if (resp.IsSuccess) {
                debugger
                var resdata = JSON.parse(resp.Data);
                var resD = resdata;
                var DataList = [], DistName = [], DistN = [];
                var Datav1 = [], Datav2 = [], Datav3 = [], Datav4 = [],  PIncorrect = [],Pcorrect=[],TAns=[],TIncorrect=[];
                var Dobj = {};
                var Sans = 0;
                var SIncans = 0;
                var STotal = 0;
                for (var i = 0; i < resD.length; i++) {
                    var isdist = DistN.filter(x => x.name == resD[i].QuesID);
                   /* if (isdist == 0) {*/
                        DistN.push({ name: resD[i].QuesID });
                    DistName.push(resD[i].QuestionCode + '. ' + resD[i].Question);//+ '. ' + resD[i].Question
                        //TAns = resD[i].Ans*100/
                    Pcorrect.push(resD[i].AnsP);
                    TAns.push(resD[i].Ans);
                    PIncorrect.push(resD[i].IncorrectMarkP);
                    TIncorrect.push(resD[i].IncorrectMark);
                    Sans += resD[i].Ans;
                    SIncans += resD[i].IncorrectMark;
                    STotal += resD[i].totalAns;
                   //}


                    //for (let key in resD[i]) {
                    //    var keyname = '';
                    //    if (key != 'Question' && key != 'QuesID') {
                    //        console.log(key, resD[i][key]);
                    //        if (key == 'Rating1_3' || key =='Rating 1-3') {
                    //            keyname = 'Rating 1-3';
                    //        }
                    //        if (key == 'Rating4_5' || key == 'Rating 4-5') {
                    //            keyname = 'Rating 4-5';
                    //        }
                    //        var index = DataList.findIndex(x => x.name == keyname);

                    //        if (index == -1) {
                    //            if (key == 'Rating1_3' || key == 'Rating 1-3') {
                    //                DataList.push({ name: keyname, data: [], color: '#544fc5' })
                    //            }
                    //            else {
                    //                DataList.push({ name: keyname, data: [], color: '#03a9f4' })
                    //            }
                    //            index = DataList.length - 1;
                    //        }
                    //        //DataList[index].data.push(resD[i][key] || 0);
                    //       // DataList[index].data.push(resD[i][key] || 0);

                    //    }
                    //}

                    //if (resD[i].FlipChart && resD[i].FlipChart != undefined) {
                    //    Datav1.push(resD[i].FlipChart);
                    //}
                    //else {
                    //    Datav1.push(0);
                    //}
                    //if (resD[i].Leaflet && resD[i].Leaflet != undefined) {
                    //    Datav2.push(resD[i].Leaflet);
                    //}
                    //else {
                    //    Datav2.push(0);
                    //}
                    //if (resD[i].Video && resD[i].Video != undefined) {
                    //    Datav3.push(resD[i].Video);
                    //}
                    //else {
                    //    Datav3.push(0);
                    //}
                    //if (resD[i].Games && resD[i].Games != undefined) {
                    //    Datav4.push(resD[i].Games);
                    //}
                    //else {
                    //    Datav4.push(0);
                    //}
                }

                DataList.push({ name: 'Correct', data: Pcorrect, color: '#008000', y: TAns })
                DataList.push({ name: 'Incorrect', data: PIncorrect, color: '#e06251', y: TIncorrect })

                //DataList.push({ name: "Flip Chart", data: Datav1 });
                //DataList.push({ name: "Leaflet", data: Datav2 });
                //DataList.push({ name: "Video", data: Datav3 });
                //DataList.push({ name: "Games", data: Datav4 });
                console.log(DataList);
                console.log(DistName);
                Highcharts.chart('ChartSummary', {
                    chart: {
                        type: 'bar',
                        scrollablePlotArea: {
                            minHeight: 450
                        },
                        //marginRight: 5
                    },
                    title: {
                        text: '' + txt + ' / ' + txt1
                    },
                    subtitle: {
                        text: '<b> Questions Correct/Incorrect : ' + Sans + '(' + (Sans * 100 / STotal).toFixed(1) + '%) / ' + SIncans + '(' + (SIncans * 100 / STotal).toFixed(1) + '%)</b>',
                        align: 'center',
                        style: {
                            fontSize: 12
                        },
                    },
                    xAxis: {
                        categories: DistName,
                        labels: {
                            useHTML: true,
                            allowOverlap: true,
                            style: {
                                fontSize: '12px',
                                wordBreak: 'break-all',
                                textOverflow: 'allow'
                            }
                        }
                    },
                    yAxis: {
                        min: 0,
                        max:100,
                        title: {
                            text: 'No of Marks',
                            fontSize: '16px',
                        }
                    },
                    credits: {
                        enabled: false
                    },
                    legend: {
                        reversed: true
                    },
                    //options: {
                    //    scales: {
                    //        xAxes: [{
                    //            barThickness: 20,  // number (pixels) or 'flex'
                    //            maxBarThickness: 20 // number (pixels)
                    //        }]
                    //    }
                    //},
                    plotOptions: {
                        series: {
                            //pointWidth: 30,
                            stacking: 'normal',
                            dataLabels: {
                                enabled: true,
                                style: {
                                    fontSize: '16px',
                                }
                            }
                        }
                    },
                    tooltip: {
                        formatter: function () {
                            console.log(this);
                            var t = '';
                            for (var i = 0; i < this.points.length; i++) {
                                t += '<span style="color:' + this.points[i].color+'">\u25CF</span> ' + this.points[i].series.name + ': <b>' + this.points[i].series.userOptions.y[this.point.index] + '</b><br/>';
                            }

                            return '<span style="font-size: 0.8em">' + this.key + '</span><br/>' + t;

                        },
                        //format: '<span style="font-size: 0.8em">{key}</span><br/>' +
                        //    '{#each points}' +
                        //    '<span style="color:{color}">\u25CF</span> ' +
                        //    '{series.name}: <b>{series.y}</b><br/>' +
                        //    '{/each}',
                        shared: true
                    },
                    series: DataList

                    //    [{
                    //    name: 'Cristiano Ronaldo',
                    //    data: [3, 4, 6, 15, 12]
                    //}, {
                    //    name: 'Lionel Messi',
                    //    data: [5, 3, 12, 6, 11]
                    //}, {
                    //    name: 'Robert Lewandowski',
                    //    data: [5, 15, 8, 5, 8]
                    //}]
                });

            }
            else {
                $('#ChartSummary').html('Data Not Found!!');
            }
        },
        error: function (req, error) {
            if (error === 'error') { error = req.statusText; }
            var errormsg = 'There was a communication error: ' + error;
            //Do To Message display
        }
    });
}

    </script>
}
