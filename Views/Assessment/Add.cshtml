@model  Hunarmis.Models.QesRes
@*@model  List<Leadership.Models.HRModel>*@
@using Hunarmis.Models;
@using Hunarmis.Manager;
@*@using System.Data*@
@{
    ViewBag.Title = "Questions: Assessment";
    // ViewBag.TitleIcon = "fa fa-user";
    //ViewBag.SemiTitle = "Leadership Pizza Self-Assessment";
    // ViewBag.SemiTitleLink = "~/";
    string IsSadmin = string.Empty;
    var idreadyonlyBT = Model.BatchId != 0 ? "style=pointer-events:none;" : "";
    var idreadyonlyTC = Model.TrainingCenterId != 0 ? "style=pointer-events:none;" : "";
    var IsActivereadyonly = (Model.Id != 0 && Model.IsDraft == false) ? "style=pointer-events:none;" : "";
    // var url = Request.Url.AbsolutePath;
    //DataTable dtcen = Hunarmis.Manager.SPManager.SP_GetDTACMasterList();
    Model.StartTime = Session["StartTime"].ToString();
    Model.EndTime = Session["EndTime"].ToString();
}


@helper BindQueston(List<Hunarmis.Models.FormModel> list)
{
    if (list != null)
    {
        var ii = 0;
        Model.Qlist = list.OrderBy(x => Convert.ToInt32(x.QuestionCode)).ToList();
        var pvsection = "";
        foreach (var item in Model.Qlist.ToList())
        {
            //pvsection = pvsection == "" ? item.SectionType : pvsection;
            var Isdis = string.IsNullOrWhiteSpace(item.ParentQuestionCode) == false ? "style=display:none;" : "style=display:block;";
            <div class="@item.ParentQuestionCode" @Isdis>
                <div class="form-group q-design">
                    @if ((item.SectionType.Trim()).ToLower() != (pvsection.Trim()).ToLower() || pvsection == "")
                    {
                        <div class="col-md-12 q-title"><strong>@item.SectionType</strong></div>

                    }

                    <span class="control-label col-md-4">
                        @(item.QuestionCode+". " + System.Text.RegularExpressions.Regex.Unescape(item.Question)) <em>*</em>
                    </span>
                    <div class="col-md-6 q-check-input">
                        @Html.HiddenFor(m => m.Qlist[ii].FormId)
                        @Html.HiddenFor(m => m.Qlist[ii].QuestionCode)
                        @Html.HiddenFor(m => m.Qlist[ii].QuestionId_pk)
                        @Html.HiddenFor(m => m.Qlist[ii].ControlType)
                        @Html.HiddenFor(m => m.Qlist[ii].ControlInputType)
                        @Html.HiddenFor(m => m.Qlist[ii].SectionType)


                        @*@Html.TextBoxFor(m => m.Qlist[ii].QuestionCode)*@
                        @if (item.ControlType.ToLower() == "checkbox")
                        {
                            for (int i = 0; i < item.OptionList.Count; i++)
                            {
                                var sel = Model.Qlist[ii].QuestionCode + Model.Qlist[ii].OptionList[i].Value;
                                var cl = "Qlist_" + ii + "__OptionList_" + i + "__InputText";
                                var cl1 = "Qlist_" + ii + "__OptionList_" + i + "__InputText1";
                                var inputval = string.IsNullOrWhiteSpace(Model.Qlist[ii].OptionList[i].InputText) ? "display:none" : "display:block";
                                var inputval1 = string.IsNullOrWhiteSpace(Model.Qlist[ii].OptionList[i].InputText1) ? "display:none" : "display:block";
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].FormId_fk)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].QuestionCode)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].QuestionId_fk)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].OptionId_Pk)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].Id)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].ControlInputType)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].Limit)

                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].Value)
                                @Html.DisplayFor(m => m.Qlist[ii].OptionList[i].Text)
                                @Html.CheckBoxFor(m => m.Qlist[ii].OptionList[i].SelectedItem,
                    new
                    {
                        Style = "vertical-align:3px",
                        @data_QIndex = ii,
                        @data_OptIndex = i,
                        @data_QuestCode = Model.Qlist[ii].QuestionCode,
                        //@required = @Model.Qlist[ii].OptionTypeValidation,
                        @class = Model.Qlist[ii].ParentQuestionCode + " " + "QuestCode" + Model.Qlist[ii].QuestionCode,
                        @onchange = "OnChgTargetcontrol('Qlist_" + ii + "__OptionList_" + i + "__InputText','Qlist_" + ii + "__OptionList_" + i + "__InputText1' ,'" + Model.Qlist[ii].OptionList[i].Value + "','" + Model.Qlist[ii].OptionList[i].SelectedItem + "',this)",
                    })
                                @*if (item.OptionList[i].ControlInputType != null)
                                    {
                                        if (item.OptionList[i].ControlInputType.ToLower() == "textbox")
                                        {
                                            var cln = !string.IsNullOrWhiteSpace(Model.Qlist[ii].OptionList[i].LabelName1) ? Model.Qlist[ii].OptionList[i].LabelName1.Replace(" ", "_") : "";
                                            <div class="@cl" style="@inputval">
                                                @Html.DisplayFor(m => m.Qlist[ii].OptionList[i].LabelName1, new { htmlAttributes = new { @class = "", @Style = "" } })
                                                @Html.EditorFor(m => m.Qlist[ii].OptionList[i].InputText, new
                                           {
                                               htmlAttributes = new
                                               {
                                                   @data_qcode = Model.Qlist[ii].QuestionCode,
                                                   @class = "form-control txt " + cln + i + " " + Model.Qlist[ii].OptionList[i].InputText + " " + Model.Qlist[ii].OptionList[i].QuestionCode + i + " txt" + Model.Qlist[ii].ParentQuestionCode + " " + Model.Qlist[ii].DependedAnswer,
                                                   Style = "" + inputval + "",
                                                   @maxlength = Model.Qlist[ii].OptionList[i].Limit,
                                                   //@required = @Model.Qlist[ii].OptionTypeValidation,
                                                   @type = Model.Qlist[ii].OptionList[i].OptionTypeValidation,
                                                   @onchange = "OnChangInputLimit('" + item.Question + "','" + Model.Qlist[ii].OptionList[i].Limit + "',this)"
                                               }
                                           })
                                            </div>
                                        }
                                    }*@
                                if (item.OptionList[i].ControlInputType1 != null)
                                {
                                    if (item.OptionList[i].ControlInputType1.ToLower() == "textbox")
                                    {
                                        <div class="@cl1" style="@inputval1">
                                            @Html.DisplayFor(m => m.Qlist[ii].OptionList[i].LabelName2, new { @class = "", @Style = "" })
                                            @Html.EditorFor(m => m.Qlist[ii].OptionList[i].InputText1, new
                                             {
                                                htmlAttributes = new
                                                {
                                                    @data_qcode = Model.Qlist[ii].QuestionCode,
                                                    @class = "form-control txt " + Model.Qlist[ii].OptionList[i].InputText1 + " " + Model.Qlist[ii].OptionList[i].QuestionCode + i + " txt" + Model.Qlist[ii].ParentQuestionCode,
                                                    Style = "" + inputval + "",
                                                    @maxlength = Model.Qlist[ii].OptionList[i].Limit,
                                                    //@required = @Model.Qlist[ii].OptionTypeValidation,
                                                    @type = Model.Qlist[ii].OptionList[i].OptionTypeValidation,
                                                    @onchange = "OnChangInputLimit('" + item.Question + "','" + Model.Qlist[ii].OptionList[i].Limit + "',this)"
                                                }
                                           })
                                        </div>
                                    }
                                }
                            }
                        }
                        @if (item.ControlType.ToLower() == "radiobutton")
                        {
                            for (int i = 0; i < item.OptionList.Count; i++)
                            {
                                var sel = Model.Qlist[ii].QuestionCode + Model.Qlist[ii].OptionList[i].Value;
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].FormId_fk)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].QuestionCode)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].QuestionId_fk)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].OptionId_Pk)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].Id)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].ControlInputType)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].Limit)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].Value)

                                <div style="float: left; width: 100%;">
                                    @Html.RadioButtonFor(m => m.Qlist[ii].Answer, Model.Qlist[ii].OptionList[i].Value,
                                     new
                                     {
                                         @data_isselected = Model.Qlist[ii].OptionList[i].SelectedItem ? "true" : "false",
                                         @data_QIndex = ii,
                                         @data_OptIndex = i,
                                         @data_qcode = Model.Qlist[ii].QuestionCode,
                                         @data_depans = Model.Qlist[ii].DependedAnswer,
                                         @data_parentqcode = Model.Qlist[ii].ParentQuestionCode,
                                         @class = Model.Qlist[ii].ParentQuestionCode + " " + "QuestCode" + Model.Qlist[ii].QuestionCode,
                                         @id = Model.Qlist[ii].OptionList[i].OptionCode,
                                         @required = @Model.Qlist[ii].OptionTypeValidation,

                                         onchange = "OnChangeRadio('" + @item.QuestionCode + "', '" + @item.OptionList[i].Value + "','" + Model.Qlist[ii].DependedAnswer + "', this)",
                                     })
                                    <label for="@(item.OptionList[i].Text.ToLower()+")&nbsp; "+ System.Text.RegularExpressions.Regex.Unescape(item.OptionList[i].LabelName1.ToLower()).Replace("\n•",""))" class="q-lable" style=" display: contents;">@item.OptionList[i].Text)&nbsp; @item.OptionList[i].LabelName1</label>
                                </div>
                            }
                        }
                        @if (item.ControlType.ToLower() == "textbox")
                        {
                            for (int i = 0; i < item.OptionList.Count; i++)
                            {
                                var sel = Model.Qlist[ii].QuestionCode + Model.Qlist[ii].OptionList[i].Value;
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].FormId_fk)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].QuestionCode)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].QuestionId_fk)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].OptionId_Pk)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].Id)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].ControlInputType)
                                @Html.HiddenFor(m => m.Qlist[ii].OptionList[i].Limit)

                                @Html.EditorFor(m => m.Qlist[ii].OptionList[i].InputText, new
                           {
                               htmlAttributes = new
                               {
                                   @data_QIndex = ii,
                                   @data_OptIndex = i,
                                   @data_qcode = Model.Qlist[ii].QuestionCode,
                                   @data_depans = Model.Qlist[ii].DependedAnswer,
                                   //@required = @Model.Qlist[ii].OptionTypeValidation,
                                   @type = Model.Qlist[ii].OptionList[i].OptionTypeValidation,
                                   @class = "form-control txt " + Model.Qlist[ii].ParentQuestionCode + " " + Model.Qlist[ii].OptionList[i].QuestionCode,
                                   Style = "display:block"
                               }
                           })
                            }
                        }
                    </div>
                </div>
            </div>
            pvsection = (item.SectionType.Trim());
            ii++;
        }
    }
}

<link href="~/Content/plugins/multiple-email/email.multiple.css" rel="stylesheet" />
<link href="~/Content/Addcss.css" rel="stylesheet" />


<div id="page-content">
    <div class="genral-form">
        <div class="row">
            <div class="col-lg-12">
                <div class="panel">
                    @using (Html.BeginForm("Add", "Assessment", FormMethod.Post, new { @class = "panel-body form-horizontal form-padding loader", enctype = "multipart/form-data", @id = "FormSubmit" }))
                    {

                        @*<h3 id="Durationtime" class="text-warning text-center countdown"> </h3>*@
                        if (Session["StartTime"] != null && Session["EndTime"] != null)
                        {
                            @*<div class="tools"><button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal"> Launch demo modal</button></div>*@
                            <h5 class="text-warning text-center">
                                Name : <strong class="text-info">@Session["Name"].ToString() </strong>
                            </h5>
                            <h5 id="DT" class="text-warning text-center">

                                Duration Time : Start :   <strong class="text-info">@CommonModel.GetTimeSpanVal(Session["StartTime"].ToString())</strong>
                                To End  : <strong class="text-info">@CommonModel.GetTimeSpanVal(Session["EndTime"].ToString())</strong>
                                <span class="renaming-time"></span>

                            </h5>

                        }
                        <div class="col-md-12">
                            @Html.Partial("_Alerts")
                            <strong class="msgerror" style="font-size:16px !important;"></strong>
                        </div>
                        <div class="panel-bodys">
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.Id)
                            @Html.HiddenFor(m => m.AssessmentId)
                            @Html.HiddenFor(m => m.FormId)
                            @*@Html.HiddenFor(m => m.BatchId)
                                @Html.HiddenFor(m => m.TrainingCenterId)*@
                            @Html.HiddenFor(m => m.RandomValue)
                            @Html.HiddenFor(m => m.StartTime)
                            @Html.HiddenFor(m => m.EndTime)
                            @Html.HiddenFor(m => m.IsDraftMode)
                            @Html.HiddenFor(m => m.IsDraft)
                            @Html.HiddenFor(m => m.Lat)
                            @Html.HiddenFor(m => m.Long)
                            @Html.HiddenFor(m => m.Address)
                            @Html.HiddenFor(m => m.LeavePage)
                            @Html.HiddenFor(m => m.ExtraCol)
                            @Html.HiddenFor(m => m.ConsentOpenForm)
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            @*<p class="bord-btm pad-ver text-main text-bold"><i class="fa fa-users spacerright2"></i>Leadership Pizza Self-Assessment</p>*@
                            <div class="form-group">
                                <label class="control-label col-md-2">Batch</label>
                                <div class="col-md-4" @idreadyonlyBT>
                                    @Html.DropDownListFor(m => m.BatchId, CommonModel.GetBindBatchForPartLists(2, Convert.ToString(Model.TrainingCenterId)), "Select One", htmlAttributes: new { @id = "BatchId", @class = "form-control select2", @required = "required" })<br />
                                    <span class="field-validation-error" data-valmsg-for="BatchId" data-valmsg-replace="true" style="display:none;"><span id="BatchId-error" class="">The BatchId field is required.</span></span>

                                </div>

                                <label class="control-label col-md-2">Training Center</label>
                                <div class="col-md-4" @idreadyonlyTC>
                                    @Html.DropDownListFor(m => m.TrainingCenterId, CommonModel.GetDistTrainingAyCentersList(), "Select One", htmlAttributes: new { @id = "TrainingCenterId", @class = "form-control select2", @required = "required" })<br />
                                    <span class="field-validation-error" data-valmsg-for="TrainingCenterId" data-valmsg-replace="true" style="display:none;"><span id="TrainingCenterId-error" class="">The TrainingCenterId field is required.</span></span>
                                </div>
                            </div>
                            @{
                                if (Model != null)
                                {
                                    @BindQueston(Model.Qlist)
                                }
                            }

                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <div class="col-md-3 pull-right">
                                    <span class="">
                                        @if (Session["BatchId"] != null && Session["TrainingCenterId"] != null)
                                        {
                                            <button type="submit" class="previous btn btn-primary btn-lg" id="btnsubmit">Final Submit</button>
                                            <button type="submit" class="previous btn btn-info btn-lg btn-draft" id="btnDraft" @IsActivereadyonly><i class="fa fa-edit"></i> Save Draft</button>
                                            @*@if (string.IsNullOrWhiteSpace(Model.RandomValue))
                                                {
                                                    <a href="~/Assessment/Add?FId=@Model.FormId" class="btn btn-dark btn-lg">Reset</a>
                                                }*@
                                        }
                                    </span>

                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@*@if (Model.ConsentOpenForm == 0){}*@
<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" data-backdrop="static">
    <div class="modal-dialog modal-lg CONSENTFORMModal" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">CONSENT FORM</h5>
                @*<button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>*@
            </div>
            <div class="modal-body" style="overflow-y: scroll; height: 70vh; overflow-x: hidden; ">
                <h2>HUNAR, PATHWAYS TO PROGRESS</h2>
                <p>
                    This consent form is intended for participants of the Hunar, Pathways to Progress initiative. By signing or
                    acknowledging this form, you agree to participate in the program and consent to the use of your
                    personal information for program-related purposes as outlined below.
                </p>
                <h4>1. Program Participation Consent</h4>
                <p>
                    I, the undersigned, hereby consent to participate in the Hunar, Pathways to Progress initiative. I
                    understand that this program is designed to improve my employability by developing my skills through
                    various training sessions, activities and ultimate job placements.
                </p>
                <h4>2. Use of Personal Information</h4>
                <p class="mb-0">I consent to the collection, use, and storage of my personal information, including but not limited to:</p>
                <ul>
                    <li>Name, contact information, and other personal details provided during registration.</li>
                    <li>Attendance records.</li>
                    <li>
                        Assessment results and performance data. I understand that this information will be used
                        strictly for the following purposes:
                    </li>
                    <ul>
                        <li>
                            Administering the program, including communications about activities, schedules, and
                            updates.
                        </li>
                        <li>Monitoring and evaluating the effectiveness of the program.</li>
                        <li>
                            Reporting program outcomes to stakeholders and partners (where data will be
                            anonymized).
                        </li>
                    </ul>
                </ul>
                <h4>3. Data Sharing for Project-Related Purposes</h4>
                <p>
                    I consent to the sharing of my personal information with third parties, including program funders and
                    partners, for project-related purposes only. I understand that my data will not be shared beyond these
                    purposes without my prior consent, and appropriate data protection measures will be taken to
                    safeguard my information.
                </p>
                <h4>4. Consent for Data Analysis</h4>
                <p>
                    I agree that my participation in the program, including attendance records, performance in activities,
                    and assessment scores, may be analyzed for the purpose of gaining insights into the program&#39;s
                    effectiveness. I understand that any reports or analyses will use anonymized or aggregated data to
                    protect my identity and confidentiality.
                </p>
                <h4>5. Voluntary Participation and Withdrawal</h4>
                <p>
                    I understand that my participation in this program is voluntary, and I may withdraw from the program at
                    any time without penalty. I also understand that, upon withdrawal, my personal data will be retained
                    only for legal and reporting purposes and as required by program guidelines.
                </p>
                <h4>6. Acknowledgment and Signature</h4>
                <p>
                    By signing or acknowledging this form, I confirm that I have read and understood the contents of this
                    consent form. I agree to participate in the program and provide my consent as described above.
                </p>
                <div class="from-Signature">
                    <div class="mb-3"><label>Participant Name:</label> <input type="text" class="formInput" id="ConsentName" name="ConsentName" value="@Session["Name"].ToString()" required /></div>
                    <div class="mb-3"><label>Signature (or Acknowledgment):</label> <input type="checkbox" id="IsConsent" name="IsConsent" class="formInput" required /></div>
                    <div><label>Date:</label> <input type="text" class="formInput" id="ConsentDate" name="ConsentDate" required /></div>
                </div>
                <p>
                    If you have any questions regarding this consent form or the use of your data, please contact the
                    program coordinator at vikash.kumar@pciglobal.in.
                </p>
                <p>
                    This form serves to protect both your rights and your privacy while ensuring the smooth operation of
                    the Hunar, Pathways to Progress program. Thank you for your participation!
                </p>
            </div>
            <div class="modal-footer">
                @*<button type="button" class="btn btn-warning" data-dismiss="modal">Close</button>*@
                <button type="button" class="btn btn-primary" onclick="POPConsentFormPost()">Agree</button>
            </div>
        </div>
    </div>
</div>

@section Scripts
{

    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Content/plugins/multiple-email/jquery.email.multiple.js"></script>
    <script src="~/Scripts/CustomValidator.js"></script>
    <script src="https://unpkg.com/bootstrap-multiselect@0.9.13/dist/js/bootstrap-multiselect.js"></script>
    <link href="https://unpkg.com/bootstrap-multiselect@0.9.13/dist/css/bootstrap-multiselect.css" rel="stylesheet" />

    <script>


        var StartDateTime = '@Session["StartDateTime"].ToString()';
        var EndDateTime = '@Session["EndDateTime"].ToString()';
        var ExamDate = '@Session["ExamDate"].ToString()';
        var PartTimeSumtxt = 0; var ST = "", ET = "";
        $(document).ready(function () {

            $('#ConsentDate').datepicker({
                dateFormat: 'dd-M-yy',
                minDate: '0',
                maxDate: '0'
            });
            $('#ConsentDate').val(moment('@DateTime.Now.Date').format("DD-MMM-YYYY"));

            //const element = document.getElementById('content-container');
            //element.addEventListener('mouseout', function (event) {
            //    alert('Mouse has left the element!');
            //    return false;
            //});

            if ('@Model' !='null') {
                if ('@Model.RandomValue' != '') {
                    setTimeout(function () {
                        if ('@Model.ConsentOpenForm' == '0') {
                            $('#exampleModal').modal('show');
                        }
                        else {
                            $('#exampleModal').modal('hide');
                        }
                        $('#BatchId').val('@Model.BatchId');
                        $('#BatchId').trigger('change');
                        $('#TrainingCenterId').val('@Model.TrainingCenterId');
                        $('#TrainingCenterId').trigger('change');

                        @*if ('@(Session["StartTime"] !=null)') {
                            ST = $('#StartTime').val();
                            ET = $('#EndTime').val();
                        }*@

                        //var diff =
                        //    new Date('01/01/1970 ' + ET) -
                        //    new Date('01/01/1970 ' + ST);

                        //var sec_numb = (diff / 1000) + "";
                        //var hours = Math.floor(sec_numb / 3600);
                        //var minutes = Math.floor((sec_numb - (hours * 3600)) / 60);
                        //var seconds = sec_numb - (hours * 3600) - (minutes * 60);

                        //if (hours < 10) { hours = "0" + hours; }
                        //if (minutes < 10) { minutes = "0" + minutes; }
                        //if (seconds < 10) { seconds = "0" + seconds; }
                        //var time = hours + ':' + minutes + ':' + seconds;
                        //$('#Durationtime').html('Time Duration : ' + time);
                        //alert(time);

                    }, 2000);
                }
            }
            getLocation().then(function (data) {
            }, function e() {
                toastr.error("Error", "Please Enable Geolocation Latitude and Longitude ");
            });
            //CountTime();
            StartTimer($('#StartTime').val(), $('#EndTime').val());

            $('#FormSubmit').validate({
                errorClass: 'help-block animation-slideDown',
                errorElement: 'div',
                errorPlacement: function (error, e) {
                    e.parents('.form-group > div').append(error);
                },
                highlight: function (e) {

                    $(e).closest('.form-group').removeClass('has-success has-error').addClass('has-error');
                    $(e).closest('.help-block').remove();
                },
                success: function (e) {
                    e.closest('.form-group').removeClass('has-success has-error');
                    e.closest('.help-block').remove();
                },
                rules: {
                    CB_DeparturePlace: {
                        required: true
                    },
                    CB_DestinationPlace: {
                        required: true
                    },

                    CB_NumberofPassenger: {
                        required: true,
                        number: true
                    },

                    CB_Customer: {
                        required: true
                    }
                }
            });

            $("#btnDraft").click(function (e) {
                e.preventDefault();
                debugger;
                 DraftMode(0);
            });

            //Final Submited
            $('#FormSubmit').submit(function (e) {
               // debugger;
                e.preventDefault();
                getLocation().then(function () {
                if (lat != '' && lng != '' && lat != undefined && lng != undefined) {
                    $("#panel-load").show();
                    setTimeout(function () {
                    $('span[id^=error_]').hide();
                    var valid = $('#FormSubmit').valid();

                    debugger;
                    var chkList = $("input[type=checkbox]", $("input[type=checkbox]").parent().parent(':visible'));
                    var chkDataList = [];
                    $.each(chkList, function (i, item) {
                        chkDataList.push({ qcode: $(item).data('qcode'), id: item.id, checked: $(item).is(":checked") });
                    });
                    var chkGroup = groupBy(chkDataList, 'qcode');
                    $.each(chkGroup, function (i, item) {
                        if (!item.filter(x => x.checked).length) {
                            $('#error_' + item[0].qcode).show();
                            valid = false;
                        }
                    });
                    if ('@ViewBag.Qlist' != 'null' && '@ViewBag.Qlist' != '') {
                        var Qcount1 = 0; var Qoptcount1 = 0;
                        var mlist = ('@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(ViewBag.Qlist))');
                        //var safe_name = escapeHtml(resp.htmlData);

                        mlist = JSON.parse(mlist.replace(/[\u0000-\u0019]+/g, ""));
                        //mlist = JSON.parse(mlist.replace(/[&<>"'u0027\u0000-\u0019\/]/g, ""));

                        for (var i = 0; i < mlist.length; i++) {
                            Qoptcount1 = 0;
                            var objm = mlist[i].QuestionId_pk;
                            var objaw = 'Qlist[' + i + '].Answer';
                            var radioObj = document.getElementsByName(objaw);
                            for (var j = 0; j < radioObj.length; j++) {
                              //  var qid = radioObj[i].name;
                                if (radioObj[j].checked) {
                                    Qcount1++;
                                    Qoptcount1++;
                                    $('#errors' + i).html('');
                                }
                                if (Qoptcount1 <= 0) {
                                    $('#errors' + i).html('This field is required.');
                                    //$('#errors' + objm).css('color', 'red');
                                }
                            }
                        }
                        debugger;
                        if (Qcount1 == mlist.length) {
                            valid = true;
                        }
                        else {
                            valid = false;
                        }
                    }

                        if (valid) {
                            $('#Lat').val(lat);
                            $('#Long').val(lng);
                       // $('.msgerror').hide();
                        $('#IsDraft').val(false);
                        $('#IsDraftMode').val(0);
                        debugger;
                        //Serialize the form datas.
                        var valdata = $("#FormSubmit").serialize();
                        //to get alert popup
                        //alert(valdata);
                        //valdata.append(Draft: true);
                        //var PostData = JSON.stringify({ model: valdata, IS_Draft:1 });
                        $.ajax({
                            url: "/Assessment/Add",
                            type: "POST",
                            dataType: 'json',
                            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                            data: valdata,
                            success: function (resp) {
                                debugger;
                                if (resp.IsSuccess) {
                                    toastr.success('Success', resp.msg);
                                    var urlpath = "/ParticipantUser/AssessmentDone";
                                    location.href = document.baseURI + urlpath;
                                    var safe_name = escapeHtml(resp.htmlData);
                                    var html = $(safe_name);//resp.htmlData
                                    var hiddenList = $('input[type="hidden"]', html);
                                    $.each(hiddenList, function (i, item) {
                                        console.log(item);
                                        if (item.id) {
                                            var hf = $('#' + item.id);
                                            if (hf) {
                                                $(hf).val($(item).val());
                                                //$(hf).val($(item).val());
                                            }
                                        }
                                    });
                                }
                                else {
                                    if (resp.type==1) {
                                        var urlpath = "/ParticipantUser/AssessmentDone";
                                        location.href = document.baseURI + urlpath;
                                    }
                                    toastr.error('Danger', resp.msg);
                                }

                                $("#panel-load").hide();
                            }
                        });
                    }
                    else {
                        $("#panel-load").hide();
                        var input = $('.input-validation-error:first');
                        if (input) {
                            input.focus();
                        }
                        toastr.error('Error', "Please fill all required fields!!");
                        return false;
                    }
                }, 100);
                }
                else {
                    toastr.error("Error", "Please Enable Geolocation Latitude and Longitude ");
                    return false;
                    }
                }, function e() {
                    toastr.error("Error", "Please Enable Geolocation Latitude and Longitude ");
                });

            });//form end submited closed

        });

        function DraftMode(TimeOut) {
            var onecountchecked = 0;
            var Is_check = true;
            getLocation().then(function () {
                if (lat != '' && lng != '' && lat != undefined && lng != undefined) {

                    $("input:radio").each(function () {
                        var name = $(this).attr('name');
                        if ($("input[type='radio'][name='" + name + "']:checked").length > 0) {
                            Is_check = true;
                            onecountchecked++;
                        }
                        else {
                            Is_check = false;
                        }
                    });

                    if (onecountchecked == 0) {
                        toastr.error('Danger', 'Please select at least one answer in each question.');
                        //alert('Please select at least one answer in each question.');
                        return false
                    }
                    $('span[data-valmsg-for="BatchId"]').hide();
                    $('span[data-valmsg-for="TrainingCenterId"]').hide();
                    if ($('#BatchId').val() == '' || $('#BatchId').val() == null) {
                        if (!$('#BatchId').val()) {
                            $('span[data-valmsg-for="BatchId"]').show();
                            $('#BatchId').focus();
                        }
                        if (!$('#TrainingCenterId').val()) {
                            $('span[data-valmsg-for="TrainingCenterId"]').show();
                        }
                        return false;
                    }

                    if (onecountchecked > 0) {
                        debugger;
                        $('#Lat').val(lat);
                        $('#Long').val(lng);

                        $('#IsDraft').val(true);
                        $('#IsDraftMode').val(1);
                        $('#TimeOut').val(TimeOut);
                        var valdata = $("#FormSubmit").serialize();
                        $.ajax({
                            url: "/Assessment/Add",
                            type: "POST",
                            dataType: 'json',
                            contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                            data: valdata,
                            success: function (resp) {
                                if (resp.IsSuccess) {
                                    toastr.success('Success', resp.msg);
                                    var html = $(resp.htmlData);
                                    var hiddenList = $('input[type="hidden"]', html);
                                    $.each(hiddenList, function (i, item) {
                                        console.log(item);
                                        if (item.id) {
                                            var hf = $('#' + item.id);
                                            if (hf) {
                                                $(hf).val($(item).val());
                                            }
                                        }
                                    });
                                }
                                else {
                                    if (resp.type == 1) {
                                        var urlpath = "/ParticipantUser/AssessmentDone";
                                        location.href = document.baseURI + urlpath;
                                    }
                                    toastr.error('Danger', resp.msg);
                                }
                                //console.log(resdata);
                            }
                        });
                    }
                    else {
                        toastr.error('Danger', 'Please select at least one answer in each question.');
                        return false
                    }
                }
                else {
                    toastr.error("Error", "Please Enable Geolocation Latitude and Longitude ");
                    return false;
                }
            }, function e() {
                toastr.error("Error", "Please Enable Geolocation Latitude and Longitude ");

            });
        }

        var lat, lng;
        const getLocation = async () => {

            const pos = await new Promise((resolve, reject) => {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(resolve, reject);
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false);
                }
            });
                lat = pos.coords.latitude;
                lng = pos.coords.longitude;
            console.log('set');
            $('#Lat').val(lat);
            $('#Long').val(lng);
                return {
                    long: pos.coords.longitude,
                    lat: pos.coords.latitude,
                };

        }
        //function getLocation() {
        //    //if (navigator.geolocation) {
        //    //    navigator.geolocation.getCurrentPosition(showPosition, null,  { enableHighAccuracy: true } );
        //    //}
        //    //else {
        //    //    alert('Geolocation is not supported by this browser.');
        //    //}

        //    if (navigator.geolocation) {
        //        geolocation = new Promise((resolve, reject) => {
        //            navigator.geolocation.getCurrentPosition(
        //                (position) => {

        //                    const pos = {
        //                        lat: position.coords.latitude,
        //                        lng: position.coords.longitude,
        //                    };
        //                    // $('#Latitude').val(lat);
        //                    $//('#Longitude').val(lang);
        //                    lat = pos.lat;
        //                    lng = pos.lng;
        //                    resolve(pos);
        //                    console.log('set');
        //                },
        //                () => {
        //                    handleLocationError(true);
        //                }, {
        //                enableHighAccuracy: true
        //            },
        //                error => { reject(error) }

        //            );

        //        }).catch(error => error)


        //        } else {
        //            // Browser doesn't support Geolocation
        //            handleLocationError(false);
        //        }



        //}
        function handleLocationError(browserHasGeolocation) {
            //var error = browserHasGeolocation ? "Error: The Geolocation service failed." : "Error: Your browser doesn't support geolocation."
           // console.log(error);
            toastr.error("Error", "Please Enable Geolocation Latitude and Longitud. ");
            return false;
        }
        function showPosition(position) {
            var lat = position.coords.latitude;
            var lang = position.coords.longitude;
            $('#Lat').val(lat);
            $('#Long').val(lang);
            //var url = "http://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat + "," + lang + "&sensor=true";
            //$.getJSON(url, function (data) {
            //    var address = data.results[0].formatted_address;
            //    $('#Address').val(address);
            //});

        }

        function StartTimer(startDateTimeP, endDateTimeP) {

            var date1 = new Date(startDateTimeP);
            var date2 = new Date(endDateTimeP);
            var oneDay = 24 * 60 * 60; // hours*minutes*seconds
            var oneHour = 60 * 60; // minutes*seconds
            var oneMinute = 60; // 60 seconds
            var firstDate = date1.getTime(); // convert to milliseconds
            var secondDate = date2.getTime(); // convert to milliseconds
            var seconds = Math.round(Math.abs(firstDate - secondDate) / 1000); //calculate the diffrence in seconds
            // the difference object
            var difference = {
                "days": 0,
                "hours": 0,
                "minutes": 0,
                "seconds": 0,
            }
            //calculate all the days and substract it from the total
            while (seconds >= oneDay) {
                difference.days++;
                seconds -= oneDay;
            }
            //calculate all the remaining hours then substract it from the total
            while (seconds >= oneHour) {
                difference.hours++;
                seconds -= oneHour;
            }
            //calculate all the remaining minutes then substract it from the total
            while (seconds >= oneMinute) {
                difference.minutes++;
                seconds -= oneMinute;
            }
            //the remaining seconds :
            difference.seconds = seconds;
            //return the difference object
            //$('#countdown').text(difference.days + ' Days ' + difference.hours + ' Hours ' + difference.minutes + ' Minutes ' + difference.seconds + ' Seconds');
            //console.log(difference);
            return difference;
        }
        setInterval(function () {
            //'02/27/2019 11:34:25 PM'
            var dt = moment(new Date()).format("MM/DD/YYYY");
            var result = StartTimer(new Date(dt+' 11:34:25 PM'), new Date());
            $('#Durationtime').text(result.days + ' Days ' + result.hours + ' Hours ' + result.minutes + ' Minutes ' + result.seconds + ' Seconds');
            //StartTimer();
        }, 1000);


        function CountTime() {

            if ('@(Session["StartTime"] !=null)') {
                ST = $('#StartTime').val();
                ET = $('#EndTime').val();
            }

            var diff =
                new Date('01/01/1970 ' + ET) -
                new Date('01/01/1970 ' + ST);


            var interval = setInterval(function () {
                var sec_numb = (diff / 1000) + "";
                var hours = Math.floor(sec_numb / 3600);
                var minutes = Math.floor((sec_numb - (hours * 3600)) / 60);
                var seconds = sec_numb - (hours * 3600) - (minutes * 60);
            if (hours < 10) { hours = "0" + hours; }
            if (minutes < 10) { minutes = "0" + minutes; }
            if (seconds < 10) { seconds = "0" + seconds; }
                var time = hours + ':' + minutes + ':' + seconds;
            $('#Durationtime').html('');
            $('#Durationtime').html('Time Duration : ' + time);

            ////var stime = new Date($('#StartTime').val());
            ////var timer2 = new Date($('#EndTime').val());
            ////var seconds = 0;
            ////var minutes = 0;
          // var interval = setInterval(function () {
            ////    seconds++;
            ////    // var timer = timer2.split(':');
            ////    //by parsing integer, I avoid all extra string processing
            ////    //var minutes = parseInt(timer[0], 10);
            ////    //var seconds = parseInt(timer[1], 10);
            ////    //--seconds;
            ////    //minutes = (seconds < 0) ? --minutes : minutes;
            ////    //console.log(minutes, seconds);
            ////    if (seconds > 59) {
            ////        minutes++;
            ////        seconds = 0;
            ////    }
            ////    // seconds = (seconds > 59) ? 0 : seconds;
            ////    //seconds = (seconds < 10) ? '0' + seconds : seconds;
            ////    $('.countdown').html(minutes + ':' + seconds);
            }, 1000);
        }

        function checkIt() {
            let unit = document.getElementsByClassName("rstar");
            let selected = false;
            for (let i = 0; i < unit.length; i++) {
                if (unit[i].checked) {
                    selected = true;
                    // break;
                }
            }
            if (!selected) {
               // toastr.error('Error', "Please fill all required fields!!");
                // gErrorMsg = gErrorMsg + "Select a sex for your cat\n";
                // alert(gErrorMsg);
                selected = false;
            }
            return selected;
        }

        const groupBy = (array, key) => {
            // Return the end result
            return array.reduce((result, currentValue) => {
                // If an array already present for key, push it to the array. Else create an array and push the object
                (result[currentValue[key]] = result[currentValue[key]] || []).push(
                    currentValue
                );
                // Return the current iteration `result` value, this will be taken as next iteration `result` value and accumulate
                return result;
            }, {}); // empty object is the initial value for result object
        };
        function escapeHtml(string) {
            var entityMap = {
                "&": "&amp;",
                "<": "&lt;",
                ">": "&gt;",
                '"': '&quot;',
                "'": '&#39;',
                "/": '&#x2F;'
            };

            return String(string).replace(/[&<>"'\/]/g, function (s) {
                return entityMap[s];
            });
        }
        function CheckIfAnyOptionSelected(sectionId) {
            var isAnyOptionOpted = false;
            $('input:checkbox.' + sectionId).each(function () {
                var sThisVal = (this.checked ? $(this).val() : "");
                if (sThisVal) {
                    isAnyOptionOpted = true;
                    return isAnyOptionOpted;
                }
            });
            $('input:radio.' + sectionId).each(function () {
                var sThisVal = (this.checked ? $(this).val() : "");
                if (sThisVal) {
                    isAnyOptionOpted = true;
                    return isAnyOptionOpted;
                }
            });
            //$("." + sectionId).find("input:checked").each(function () {
            //    isAnyOptionOpted = true;
            //    return isAnyOptionOpted;
            //});
            return isAnyOptionOpted;
        }

        function Load() {
            var form = $("#FormSubmit");
            var chcklist = $('input[type="checkbox"]', form);
            $.each(chcklist, function (i, item) {
                if ($(item).is(':checked')) {
                    var qindex = $(item).data('qindex');
                    var optindex = $(item).data('optindex');
                    var inp = $(`#Qlist_${qindex}__OptionList_${optindex}__InputText`);
                    if (inp) {
                        $(inp).css('display', 'block').attr('required', 'required');
                    }
                }
            });

            var radiolist = $('input[type="radio"]', form);
            $.each(radiolist, function (i, item) {
                var isselected = $(item).prop('checked');
                var qcode = $(item).data('qcode');
                var depans = $(item).data('depans');
                var val = $(item).val();
                if (isselected && val == depans) {
                    $('.' + qcode).css('display', 'block');
                }
            });

            //var txtlist = $('input[type="text"]', form);
            //$.each(txtlist, function (i, item) {
            //    txtChange(item, "");
            //});
            //CheckBoxTextOnchag();
        }

        //var ChildControlTypeId, Sel, Chck;
        function OnChgTargetcontrol(ControlTypeId, ControlTypeId1, Sel, Chck, Ele) {
            var id = Ele.id;
            IsCheck = $("#" + id).is(':checked');
            //var ContTypeId = $('#' + ControlTypeId);
            if (IsCheck) {
                $('.' + ControlTypeId).css('display', 'block');
                $('.' + ControlTypeId1).css('display', 'block');
                $('#' + ControlTypeId).css('display', 'block');
                $('#' + ControlTypeId1).css('display', 'block');
                $('#' + ControlTypeId).attr('required', 'required');
                $('#' + ControlTypeId1).attr('required', 'required');

            }
            else {
                $('.' + ControlTypeId).css('display', 'none');
                $('.' + ControlTypeId1).css('display', 'none');
                $('#' + ControlTypeId).css('display', 'none');
                $('#' + ControlTypeId1).css('display', 'none');
                $('#' + ControlTypeId).val('');
                $('#' + ControlTypeId1).val('');
                $('#' + ControlTypeId).removeAttr('required');
                $('#' + ControlTypeId1).removeAttr('required');
            }
            CheckBoxTextOnchag();
        }

        function OnChangeRadio(QuestionCode, SelVal, DepandAns, Ele) {

            // var clname = $('.' + QuestionCode).attr('class');
            var clname = $('.' + QuestionCode).attr('class') == undefined ? null : $('.' + QuestionCode).attr('class');
            //if (clname) {
            //    clname = clname.split(' ');
            //}
            //if (clname != null) {
            //    //depeded Question
            //    if (SelVal == DepandAns && QuestionCode == clname[0]) {
            //        $('.' + QuestionCode).css('display', 'block');
            //    }
            //    else {
            //        $('.' + QuestionCode).prop("checked", false);
            //        $('.' + QuestionCode).css('display', 'none');
            //        $('.txt' + QuestionCode).css('display', 'none');
            //        $('.txt' + QuestionCode).val('');
            //    }

            //}
            //else {
            //    $('.txt' + QuestionCode).css('display', 'none');
            //    $('.txt' + QuestionCode).val('');
            //    $('.' + QuestionCode).prop('checked', false);
            //    $('.' + QuestionCode).val('');
            //    $('.' + QuestionCode).css('display', 'none');
            //}
            //CheckBoxTextOnchag();
        }

        function OnChangInputLimit(Ques, SelLimit, Ele) {
            var cid = parseToNumber(Ele.value);
            if (cid != 0 && parseToNumber(SelLimit) != 0) {
                if (cid > parseToNumber(SelLimit)) {
                    alert(Ques + 'Max Limit: ' + SelLimit);
                    var inputid = Ele.id;
                    $('#' + inputid).val('')
                    return false;
                }
            }
        }




    </script>
    <script>

        // Getting formated date from date string
        let deadline = new Date(EndDateTime).getTime();

        // Calling defined function at certain interval
        let x = setInterval(function () {

            // Getting current date and time in required format
            let now = new Date().getTime();

            // Calculating difference
            let t = deadline - now;

            // Getting values of days,hours,minutes, seconds
            let days = Math.floor(
                t / (1000 * 60 * 60 * 24)
            );
            let hours = Math.floor(
                (t % (1000 * 60 * 60 * 24)) /
                (1000 * 60 * 60)
            );
            let minutes = Math.floor(
                (t % (1000 * 60 * 60)) / (1000 * 60)
            );
            let seconds = Math.floor(
                (t % (1000 * 60)) / 1000
            );

            // Show the output time

            $(".renaming-time").text(hours + ':' + minutes + ':' + seconds);

            // Show overtime output
            if (t < 1) {
                clearInterval(x);
                //$('#btnDraft').click();
                DraftMode(1);
                location.href = document.baseURI + '/ParticipantUser/Login';
                //document.getElementById(
                //    "demo"
                //).innerHTML = "TIME UP";
                //document.getElementById(
                //    "day"
                //).innerHTML = "0";
                //document.getElementById(
                //    "hour"
                //).innerHTML = "0";
                //document.getElementById(
                //    "minute"
                //).innerHTML = "0";
                //document.getElementById(
                //    "second"
                //).innerHTML = "0";
            }
        }, 1000);

        function POPConsentFormPost() {
            var isc = $('#IsConsent').is(':checked');
            if (isc == false || $('#ConsentName').val() == '' || $('#ConsentDate').val()=='') {
                toastr.error("Error", 'All field required.');
                return false;
            }
            if ('@Guid.Parse(Session["PartUserId"].ToString())') {
                isc = isc == true ? 1 : 0;
                $.ajax({
                    url: document.baseURI + "/Assessment/ConsentParticipant",
                    type: "Post",
                    data: { 'ParticipantId': '@Guid.Parse(Session["PartUserId"].ToString())', 'ConsentName': $('#ConsentName').val(), 'ConsentDate': $('#ConsentDate').val(), 'IsConsent': isc },
                    //cache: false,
                    //contentType: false,
                    //processData: false,
                    success: function (resp) {
                        if (resp.StatusType == "success") {
                            //window.location.href = document.baseURI + "/Assessment/Add"
                            $('#exampleModal').modal('hide');
                        }
                        else {
                            toastr.error("Error", resp.Message);
                            return false;
                        }
                    },
                    error: function (req, error) {
                        if (error === 'error') { error = req.statusText; }
                        var errormsg = 'There was a communication error: ' + error;
                        toastr.error("Error", errormsg);
                        //jQuery.event.trigger("ajaxStop");
                        return false;
                    }
                });
            }
            else {
                return false;
            }

        }

    </script>

}
