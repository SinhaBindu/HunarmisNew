@model Hunarmis.Models.AttendanceModel
@using Hunarmis.Manager
@{
    ViewBag.Title = "Attendance";
    ViewBag.TitleIcon = "fa fa-user";
    ViewBag.SemiTitle = "Attendance Lists";
    ViewBag.SemiTitleLink = "/Attendance/AttendanceList";
}
<style>
    .form-group {
        margin-bottom: 6px;
    }
</style>

<div id="page-content">
    <div class="container-fluid">
        <div class="row mt-20">
            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                <div class="card card-box p-0">
                    <div class="card-body">
                        <div class="row">
                            @using (Html.BeginForm("CreatedAttend", "Attendance", FormMethod.Post, new { id = "submission-form" }))
                            {
                                <div class="col-xs-12 col-md-12">
                                    <fieldset class="fieldset-card">
                                        <div class="row">
                                            <input type="hidden" name="Latitude" id="Latitude" value="" />
                                            <input type="hidden" name="Longitude" id="Longitude" value="" />
                                            <input type="hidden" name="Address" id="Address" value="" />
                                            <div class="col-md-12">@Html.Partial("_Alerts")</div>
                                            <div class="col-xs-12 col-md-6">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.BatchId, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.BatchId, new List<SelectListItem>(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.BatchId, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-md-6">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.CourseIds, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.CourseIds, new List<SelectListItem>(), null, htmlAttributes: new { @class = "form-control", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.CourseIds, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-md-12">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.TopicIds, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.TopicIds, new List<SelectListItem>(), null, htmlAttributes: new { @class = "form-control", multiple = "multiple", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.TopicIds, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-md-2" style="display:none;" id="dv-TopicOther">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.TopicOther, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(m => m.TopicOther, null, new { htmlAttributes = new { @placeholder = "Enter the Other Topice.", @class = "timepicker form-control required", @required = "required" } })
                                                    @Html.ValidationMessageFor(model => model.TopicOther, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(m => m.StartDate, null, new { htmlAttributes = new { @placeholder = "Enter the Attendance Date", @class = "form-control required", @required = "required" } })
                                                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.StrStartTime, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(m => m.StrStartTime, null, new { htmlAttributes = new { @placeholder = "Enter the Attendance Start Time", @class = "timepicker form-control required", @required = "required" } })
                                                    @Html.ValidationMessageFor(model => model.StrStartTime, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.StrEndTime, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(m => m.StrEndTime, null, new { htmlAttributes = new { @placeholder = "Enter the Attendance End Time", @class = "timepicker form-control required", @required = "required" } })
                                                    @Html.ValidationMessageFor(model => model.StrEndTime, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-md-2">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.AttendanceImage, htmlAttributes: new { @class = "control-label" })
                                                    @if (Model.AttendanceId_pk == Guid.Empty)
                                                    {
                                                        <input type="file" class="AttendanceImage form-control" name="AttendanceImage" id="AttendanceImage" accept="image/png, image/jpeg, image/jpg" />
                                                        @Html.ValidationMessageFor(model => model.AttendanceImage, "", new { @class = "text-danger" })
                                                    }
                                                    else
                                                    {
                                                        if (!string.IsNullOrWhiteSpace(Model.AttendanceImagePath))
                                                        {
                                                            var attendimg = Model.AttendanceImagePath.Replace("~", "");
                                                            <a href="@(CommonModel.GetBaseUrl() + attendimg)" target="_blank" class="down-btn"><i class="fa fa-download"></i></a>
                                                        }
                                                        <input type="file" class="AttendanceImage form-control" name="AttendanceImage" id="AttendanceImage" accept="image/png, image/jpeg, image/jpg" />
                                                    }
                                                </div>
                                            </div>
                                            <div class="col-xs-12 col-md-4 text-right">
                                                <div class="form-group">
                                                    <div class="control-label" style="margin-bottom:5px;">&nbsp;</div>
                                                    <input type="submit" name="btnsubmit" value="Attendance Submit" id="btnsubmit" class="btn-register" style="display: inline-block !important; padding: 6px 16px; margin-right: 5px;" />
                                                    <a href="~/Attendance/CreatedAttend" class="btn-reset" style="display: inline-block; margin-right: 5px; padding: 6px 16px;"><i class="fa fa-refresh"></i></a>
                                                    <span id="div-download" class="btn-downs" style="display: inline-block; margin-right: 5px; padding: 6px 16px;"></span>
                                                </div>
                                            </div>
                                        </div>
                                    </fieldset>
                                </div>
                                <div class="col-xs-12 col-md-12">
                                    <div id="subdata">
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @*<script src="~/Scripts/CustomValidator.js"></script>*@
    <script src="~/Scripts/Custom/Master.js"></script>
    <script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAw2rgDsJqTKA8ern_oI6heqv-xgSLuu1U"></script>

    <script>
        $(document).ready(function () {

            // $('#TACs').multiselect();
            //$('#DistrictId').change(function () {
            //    $('#TrainCenterIdMappedMult').val('');
            //    if ($('#DistrictID').val() != '' && $('#TrainAgencyId').val() != '') {
            //        BindTrainingCenter("TrainCenterIdMappedMult", 0, false, $('#DistrictId').val(), $('#TrainAgencyId').val());
            //        $('#TrainCenterIdMappedMult').multiSelect();
            //    }
            //});
            //$('#TrainAgencyId').change(function () {
            //    $('#TrainCenterIdMappedMult').val('');
            //    if ($('#DistrictID').val() != '' && $('#TrainAgencyId').val() != '') {
            //        BindTrainingCenter("TrainCenterIdMappedMult", 0, false, $('#DistrictId').val(), $('#TrainAgencyId').val());
            //        $('#TrainCenterIdMappedMult').multiSelect();
            //    }
            //});
            // setTimeout(BindData, 2000);
            //$('.multiple').multiselect({
            //    includeSelectAllOption: true
            //});
            //$('#DataList tbody tr td.multiple').multiSelect('refresh');
            //timepicker
            $('#StrStartTime').timepicker({
                timeFormat: 'h:mm p',
               // interval: 60,
                minTime: '10',
                maxTime: '12:00pm',
                defaultTime: '10',
                startTime: '10:00',
                dynamic: false,
                dropdown: true,
                scrollbar: true
            });
            $('#StrEndTime').timepicker({
                timeFormat: 'h:mm p',
                defaultTime: '3:00pm',
                minTime: '3:00pm',
                maxTime: '6:00pm',
                startTime: '3:00pm',
                dynamic: false,
                dropdown: true,
                scrollbar: true
            });
            $("#StartDate").datepicker({
                dateFormat: 'dd-M-yy',
                // changeMonth: true,
                //changeYear: true,
                minDate: '0',
                maxDate: '0',
            });
            $("#StartDate").datepicker("setDate", "1");

            //$('#AttendanceStartTime').datetimepicker({
            //    format: 'LT'
            //});
            //$('#AttendanceEndTime').datetimepicker({
            //    format: 'LT'
            //});

            //::Time Condition
            //$('#AttendanceStartTime').on("change.datetimepicker", function (e) {
            //    if (e.date) {
            //        $('#AttendanceEndTime').datetimepicker(e.date.add(15, 'm'));
            //    }
            //    $('#AttendanceEndTime').datetimepicker('minDate', e.date)
            //});
            getLocation();
            BindGetTainerWiseBatchesList("BatchId", '', '2', '');
            $('#BatchId').change(function () {
                OtherTopice();
                if ($(this).val() != '' && $(this).val() != null) {
                    debugger;
                    BindBatchWiseCourseList("CourseIds", '', '2', $(this).val());
                    $('#CourseIds').prop('selectedIndex', 0);
                    OtherTopice();
                    debugger;
                    BindCourseSessionTopices("TopicIds", '', '2', $('#CourseIds').val());//.join(',')
                    $('#TopicIds').multiselect({
                        includeSelectAllOption: true,
                        enableFiltering: true,
                        buttonWidth: '100%',
                        multiple: true
                    });
                    $('#TopicIds').multiselect('rebuild');
                    $('#TopicIds').change();

                        //$('#CourseIds').multiselect({
                        //    buttonWidth: '100%'
                        //});
                        //$('#CourseIds').multiselect('rebuild');
                        //$('#CourseIds').change();

                    BindPartData();
                }
            });

            $('#CourseIds').change(function () {
                OtherTopice();
                if ($(this).val() != '' && $(this).val() != null) {
                    BindCourseSessionTopices("TopicIds", '', '2', $(this).val().join(','));
                   // setTimeout(function () {
                        $('#TopicIds').multiselect({
                            includeSelectAllOption: true,
                            enableFiltering: true,
                            buttonWidth: '100%',
                            multiple: true
                        });
                        $('#TopicIds').multiselect('rebuild');
                        $('#TopicIds').change();
                   // }, 200)
                }
            });
            $('#TopicIds').change(function () {
                OtherTopice();
            });

            $('#submission-form').submit(function (e) {
                e.preventDefault();
                getLocation().then(function () {
                    if (lat != '' && lng != '' && lat != undefined && lng != undefined) {
                        if ($("#submission-form").valid()) {
                            if (confirm("Are you sure you want to submit this appearance?")) {
                                CUData();
                            } else
                                return false;
                            //return false;
                        }
                        else {
                            return false;
                        }
                    }
                    else {
                        toastr.error("Error", "Please Enable Geolocation Latitude and Longitude ");
                        return false;
                    }
                }, function e() {
                    toastr.error("Error", "Please Enable Geolocation Latitude and Longitude ");
                });
            });

            //const myTable = $('#DataList').dataTable({
            //    stateSave: true
            //});
            //const allPagesCheckboxes = myTable.fnGetNodes();
            //console.log(allPagesCheckboxes);
            //$('#selectAll').click(function () {
            //    const thisText = $(this).text();
            //    if (thisText === "Unselect All") {
            //        $('input[type="checkbox"]', allPagesCheckboxes)
            //            .attr('checked', false);
            //        $(this).text('Select All');
            //    }
            //    else {
            //        $('input[type="checkbox"]', allPagesCheckboxes)
            //            .attr('checked', true);
            //        $(this).text('Unselect All');
            //    }

            //});

        });
        var lat, lng;
        const getLocation = async () => {

            const pos = await new Promise((resolve, reject) => {
                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(resolve, reject);
                } else {
                    // Browser doesn't support Geolocation
                    handleLocationError(false);
                }
            });
            lat = pos.coords.latitude;
            lng = pos.coords.longitude;
            console.log('set');
            $('#Lat').val(lat);
            $('#Long').val(lng);
            return {
                long: pos.coords.longitude,
                lat: pos.coords.latitude,
            };

        }
        function handleLocationError(browserHasGeolocation) {
            //var error = browserHasGeolocation ? "Error: The Geolocation service failed." : "Error: Your browser doesn't support geolocation."
            // console.log(error);
            toastr.error("Error", "Please Enable Geolocation Latitude and Longitud. ");
            return false;
        }
        function showPosition(position) {
            var lat = position.coords.latitude;
            var lang = position.coords.longitude;
            $('#Lat').val(lat);
            $('#Long').val(lang);
            //var url = "http://maps.googleapis.com/maps/api/geocode/json?latlng=" + lat + "," + lang + "&sensor=true";
            //$.getJSON(url, function (data) {
            //    var address = data.results[0].formatted_address;
            //    $('#Address').val(address);
            //});

        }

        function CheckUnchecked(cur) {
            if ($(cur).attr('id') == 'selectAll') {
                $('#tbl tbody tr .check').each(function (i, item) {
                    $(item).prop('checked', $(cur).prop('checked'));
                });
            } else {
                var isallChecked = true;
                $('#tbl tbody tr .check').each(function (i, item) {
                    if (!$(item).prop('checked')) {
                        isallChecked = false;
                        return;
                    }
                });
                $('#selectAll').prop('checked', isallChecked);
            }
        }

        function CUData() {
            debugger;
            var IsCheck = false;
            var isvalid = $("#submission-form").valid();
            var tblpushdata = []; var modellist = [];
            var formData = new FormData();
            var Latitude = lat;
            var Longitude = lng;
            var Address = $('#Address').val();
            if (lat == '' || lng == '') {
                toastr.error("Error", "Allow to Location !!");
                IsCheck = false
                return false;
            }
            if ($('#BatchId').val() == '' || $('#BatchId').val() == undefined) {
                toastr.error("Error", "Please Select Batch !!");
                IsCheck = false
                return false;
            }
            if ($('#CourseIds').val() == '' || $('#CourseIds').val() == undefined) {
                toastr.error("Error", "Please Select Courses.");
                IsCheck = false
                return false;
            }
            if ($('#TopicIds').val() == '' || $('#TopicIds').val() == undefined) {
                toastr.error("Error", "Please Select Session Plan.");
                IsCheck = false
                return false;
            }
            if ($('#StartDate').val() == '' || $('#StartDate').val() == undefined) {
                toastr.error("Error", "Enter the Start Date.");
                IsCheck = false
                return false;
            }
            if ($('#StrStartTime').val() == '' || $('#StrStartTime').val() == undefined || $('#StrEndTime').val() == '' || $('#StrEndTime').val() == '') {
                toastr.error("Error", "Enter the Start and End Time.");
                IsCheck = false
                return false;
            }
            var CourseIds = $('#CourseIds').val();
            //if (CourseIds != null && CourseIds != undefined) {
            //    if (CourseIds.length != 0) {
            //        IsCheck = true;
            //        CourseIds = CourseIds.join(',');
            //    }
            //}
            var TopicIds = $('#TopicIds').val();
            if (TopicIds != null && TopicIds != undefined) {
                if (TopicIds.length != 0) {
                    IsCheck = true;
                    TopicIds = TopicIds.join(',');
                    var splitcom = TopicIds.split(',');
                    for (var i = 0; i < splitcom.length; i++) {
                        if (splitcom[i] == "261") {
                            //    || splitcom[i] == "262" || splitcom[i] == "263" || splitcom[i] == "264") {
                            $('#TopicOther').append($('#TopicOther').val());
                        }
                    }
                }
            }

            var atleastonepart = 0;
              let table2 = $('#tbl').DataTable();
                table2.$('input[class=check]').each(function (i, row) {
                    var participantid = $(row).attr('data-participantid');
                    var batchid = $(row).attr('data-batchid');
                    if (participantid != '' && participantid != '@Guid.Empty' && participantid != undefined) {
                        if ($(this).is(':checked')) {
                            atleastonepart += 1;
                            IsCheck = true;
                            tblpushdata.push({
                                AttendancePartId_pk: '@Guid.Empty',
                                AttendanceId_fk: '@Guid.Empty',
                                ParticipantId_fk: participantid,
                            });
                        }
                    }
                });
            if (atleastonepart == 0) {
                toastr.error("Error", "Please selected at least one participant.");
                IsCheck = true;
                return false;
            }
            formData.append('AttendanceId_pk', '@Guid.Empty');
            formData.append('BatchId', $('#BatchId').val());
            formData.append('Lat', lat);
            formData.append('Long', lng);
            //formData.append('Address', $('#Year').val());
            formData.append('StartDate', $('#StartDate').val());
            formData.append('StrStartTime', $('#StrStartTime').val());
            formData.append('StrEndTime', $('#StrEndTime').val());
            formData.append('CourseIds', CourseIds);
            formData.append('TopicIds', TopicIds);
            formData.append('PARTModel', JSON.stringify(tblpushdata));
            if ($('#AttendanceImage').get(0).files.length != 0) {
                formData.append('AttendanceImage', $('#AttendanceImage')[0].files[0]);
            }
            debugger;
            if (isvalid && IsCheck) {
                $.ajax({
                    url: document.baseURI + "/Attendance/CreatedAttend",
                    type: "Post",
                    contentType: "application/json; charset=utf-8",
                    data: formData,
                    dataType: "json",
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (resp) {
                        if (resp.StatusType == "success") {
                            toastr.success("Success", resp.Message);

                            BindPartData();
                            //jQuery.event.trigger("ajaxStop");
                        }
                        else {
                            toastr.error("Error", resp.Message);
                        }
                    },
                    error: function (req, error) {
                        if (error === 'error') { error = req.statusText; }
                        var errormsg = 'There was a communication error: ' + error;
                        toastr.error("Error", errormsg);
                        //jQuery.event.trigger("ajaxStop");
                        return false;
                    }
                });
            }
            else {
                return false;
            }
        }

        function BindPartData() {
            $("#subdata").html('');
            var filtermodel = new Object();
            filtermodel.BatchId = $('#BatchId').val() == '' ? '' : $('#BatchId').val();

            $.ajax({
                type: "Get",
                url: document.baseURI + "/Attendance/GetPartList",
                data: filtermodel,
                //cache: false,
                success: function (res) {
                    if (res.IsSuccess) {
                        if (res.IsAttend) {
                            $("#btnsubmit").attr("disabled", "disabled");
                            $("#btnsubmit").css("display", "none");
                        }
                        else {
                            $("#btnsubmit").removeAttr("disabled");
                            $("#btnsubmit").css("display", "block");
                        }
                        $("#subdata").html(res.Data);

                        if ($.fn.dataTable.isDataTable('#tbl')) {
                            $("#tbl").dataTable().fnDestroy();
                        }
                        table = $('#tbl').DataTable({
                            //scrollY: "400px",
                            //scrollX: true,
                            //scrollCollapse: true,
                            "dom": '<"pull-left"f><"pull-right"l>tip',
                            paging: false,
                            "ordering": false,
                            // pageLength: 100,
                            fixedColumns: {
                                leftColumns: 1,
                                rightColumns: 1
                            },
                            order: [[1, 'asc']],
                            buttons: [{
                                extend: 'excel', text: '<span><i class="fa fa-download"></i> Download</span>', title: 'Participant Lists',//$('#IDDistrict option:selected').text() +
                                className: 'btn btn-primary button-icon mr-3 mt-1 mb-1',
                                filename: 'Participant Lists',
                                exportOptions: { modifier: { page: 'all' } }
                            }],
                        });
                        $('.dataTables_filter input[type="search"]').css(
                            { 'width': '300px', 'display': 'inline-block' }
                        );
                        $('#div-download').empty();
                        table.buttons().container().appendTo($('#div-download'));
                    }
                    else {
                        $("#subdata").html(res.Data);
                    }
                },
                error: function (req, error) {
                    if (error === 'error') { error = req.statusText; }
                    var errormsg = 'There was a communication error: ' + error;
                    //Do To Message display
                }
            });
        }

        function OtherTopice() {
            $('#dv-TopicOther').css('display', 'none');
            $('#TopicOther').css('display', 'none');
            $('#TopicOther').val('');
            var TopicIds = $('#TopicIds').val();
            if (TopicIds != null && TopicIds != undefined) {
                if (TopicIds.length != 0) {
                    TopicIds = TopicIds.join(',');
                    var splitcom = TopicIds.split(',');
                    for (var i = 0; i < splitcom.length; i++) {
                        if (splitcom[i] == "261") {
                        //    || splitcom[i] == "262" || splitcom[i] == "263" || splitcom[i] == "264") {
                            $('#dv-TopicOther').css('display', 'block');
                            $('#TopicOther').css('display', 'block');
                        }
                    }
                }
            }
        }

        //function BindData() {
        //    $('#submission-data').removeClass("text-danger");
        //    var url = $('#submission-form').attr("action");
        //    var formData = $('#submission-form').serialize();
        //    var RoleId = $('#RoleId').val();
        //    $.ajax({
        //        url: url,
        //        type: "Post",
        //        data: { 'RoleId': RoleId, 'CheckBox': 1 },
        //        success: function (resp) {
        //            if (resp.IsSuccess) {
        //                $('#submission-data').html(resp.Data);
        //                //$('select').multiSelect();

        //                if ($.fn.dataTable.isDataTable('#DataList')) {
        //                    $("#DataList").dataTable().fnDestroy();
        //                }
        //                table = $('#DataList').DataTable({
        //                    //scrollY: "400px",
        //                    //scrollX: true,
        //                    //scrollCollapse: true,
        //                    //paging: false,
        //                    //"ordering": false,
        //                    pageLength: 50,

        //                    fixedColumns: {
        //                        leftColumns: 1,
        //                        rightColumns: 1
        //                    },
        //                    buttons: [{
        //                        extend: 'excel', text: '<span><i class="fa fa-download"></i>Export</span>', title: 'User Lists',//$('#IDDistrict option:selected').text() +
        //                        className: 'btn btn-primary button-icon mr-3 mt-1 mb-1',
        //                        filename: 'User List',
        //                        exportOptions: { modifier: { page: 'all' } }
        //                    }],
        //                });
        //                $('.dataTables_filter input[type="search"]').css(
        //                    { 'width': '500px', 'display': 'inline-block' }
        //                );
        //                $('#div-download').empty();
        //                table.buttons().container().appendTo($('#div-download'));
        //                //$('#DataList tbody tr td.multiple').multiselect({
        //                //    includeSelectAllOption: true
        //                //});
        //                //$('#DataList tbody tr td.multiple').multiSelect('refresh');

        //                var array = [];

        //                $('#DataList tbody tr').each(function (i, row) {
        //                    //debugger;
        //                    var values = [];
        //                    //var mselval = row.attr('data-mselval');
        //                    var hdval = $(row).find('#hd' + i).val().split(",");
        //                    //var ddl = $(row).find("select[TAC='" + i + "']");
        //                    if (hdval != '' && hdval != undefined) {
        //                        for (var i in hdval) {
        //                            var optionVal = hdval[i];
        //                            $(row).find("select").find("option[value=" + optionVal + "]").prop("selected", "selected");
        //                        }
        //                    }

        //                    // var mselval = $(this).find("select[TAC='" + i + "']").text();
        //                    //$("select[TAC='" + i + "']").val(['1', '2']);
        //                    //var td=$(this).find('td')
        //                    //    .each(function (y, tditem) {
        //                    //        debugger;
        //                    //     values.push();
        //                    // });

        //                    array.push(values);
        //                });
        //                $('.multiple').multiselect({
        //                    includeSelectAllOption: true
        //                });

        //            }
        //            else {
        //                $('#submission-data').html("Record Not Found !!");//TO DO
        //                $('#submission-data').addClass("text-danger");//TO DO
        //            }
        //        },
        //        error: function (req, error) {
        //            if (error === 'error') { error = req.statusText; }
        //            var errormsg = 'There was a communication error: ' + error;
        //            $('#submission-data').html(errormsg);
        //        }
        //    });
        //}
        //Submit Data

    </script>
}
