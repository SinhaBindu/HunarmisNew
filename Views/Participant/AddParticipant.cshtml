@model Hunarmis.Models.ParticipantModel
@using Hunarmis.Manager;

@{
    ViewBag.Title = "Participant";
    ViewBag.TitleIcon = "fa fa-user";
    ViewBag.SemiTitle = "Participant List";
    ViewBag.SemiTitleLink = "/Participant/ParticipantList";
    string IsSadmin = string.Empty;
}
<link href="~/Content/plugins/multiple-email/email.multiple.css" rel="stylesheet" />

<style>
    .text-white {
        color: #fff;
    }

    .center {
        margin-top: 50px;
    }

    .modal-header {
        padding-bottom: 10px;
    }

    .modal-footer {
        padding: 0;
    }

        .modal-footer .btn-group button {
            height: 40px;
            border-top-left-radius: 0;
            border-top-right-radius: 0;
            border: none;
            border-right: 1px solid #ddd;
        }

        .modal-footer .btn-group:last-child > button {
            border-right: 0;
        }

    .manage-input {
        display: flex;
        gap: 30px;
    }

    .card1, .card2, .card3 {
        flex: 1;
    }

    .form-horizontal .control-label {
        text-align: left !important
    }

    .check-box {
        margin-right: 12px;
    }

    @@media (max-width:991px) {
        .mt-md-10 {
            margin-top: 10px;
        }

        .manage-input {
            padding: 0 20px;
        }
    }

    @@media screen and (max-width: 900px) {
        .manage-input {
            flex-direction: column;
        }
    }
</style>

<div id="page-content">
    <div class="genral-form">
        <div class="row">
            <div class="col-lg-12">
                <div class="panel">
                    @using (Html.BeginForm("AddParticipant", "Participant", FormMethod.Post, new { @class = "panel-body form-horizontal form-padding loader", enctype = "multipart/form-data", @id = "formid" }))
                    {
                        <div class="col-md-12">@Html.Partial("_Alerts")</div>
                        <div class="panel-bodys">
                            @Html.AntiForgeryToken()
                            @Html.HiddenFor(m => m.ID)
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                            <p class="bord-btm pad-ver text-main text-bold"><i class="fa fa-users spacerright2"></i>@ViewBag.Title Information</p>
                            <div class="manage-input">
                                <div class="card1">
                                    @if (Model.ID != Guid.Empty)
                                    {
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.RegID, htmlAttributes: new { @class = "control-label col-lg-12" })
                                            <div class="col-lg-12">
                                                @Html.EditorFor(model => model.RegID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                @Html.ValidationMessageFor(model => model.RegID, "", new { @class = "text-danger" })
                                            </div>
                                            <div class="mark-devide"></div>
                                        </div>
                                    }
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "required form-control", @required = "required" } })
                                            @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = " form-control" } })
                                            @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "required form-control", @required = "required" } })
                                            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                    <div class="form-group gender-box">
                                        <label class="col-lg-12">Gender</label>
                                        <div class="col-lg-12">
                                            <div class="checkbox">
                                                @foreach (var item in CommonModel.GetGender())
                                                {
                                                    <div class="check-box">
                                                        @Html.RadioButtonFor(model => model.Gender, item.Value, new { id = "Gender" + item.Value, @required = "required" }) @item.Text
                                                    </div>
                                                }
                                                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                            </div>
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @type = "number", @class = "required form-control", @required = "required", minlength = "10", @maxlength = "10" } })
                                            @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AlternatePhoneNo, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.EditorFor(model => model.AlternatePhoneNo, new { htmlAttributes = new { @type = "number", @class = " form-control", @min = "10", @maxlength = "10" } })
                                            @Html.ValidationMessageFor(model => model.AlternatePhoneNo, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                </div>
                                <div class="card2">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @type = "number", @class = "required form-control", @required = "required", @maxlength = "2" } })
                                            @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.EmailID, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.EditorFor(model => model.EmailID, new { htmlAttributes = new { @type = "email", @class = "required form-control", @required = "required", @maxlength = "150" } })
                                            @Html.ValidationMessageFor(model => model.EmailID, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AadharCardNo, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @*@Html.PasswordFor(model => model.AadharCardNo, new { @type = "password", @class = "required form-control", @required = "required", @min = "12", @maxlength = "12" })*@
                                            @Html.TextBoxFor(model => model.AadharCardNo, new { @type = "text", @class = "required form-control", @required = "required", @min = "12", @maxlength = "12" })
                                            @Html.ValidationMessageFor(model => model.AadharCardNo, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AssessmentScore, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.EditorFor(model => model.AssessmentScore, new { htmlAttributes = new { @type = "number", @class = "required form-control", @required = "required", @maxlength = "3" } })
                                            @Html.ValidationMessageFor(model => model.AssessmentScore, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.EduQualificationID, htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownListFor(model => model.EduQualificationID, CommonModel.GetEducational(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.EduQualificationID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group" id="div-eq" style="display:none;">
                                        @Html.LabelFor(model => model.EduQualOther, htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.EditorFor(model => model.EduQualOther, new { htmlAttributes = new { @class = "required form-control", @maxlength = "500" } })
                                            @Html.ValidationMessageFor(model => model.EduQualificationID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CourseEnrolledID, htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownListFor(model => model.CourseEnrolledID, CommonModel.GetCourses(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.CourseEnrolledID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                </div>
                                <div class="card3">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.BatchId, htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownListFor(model => model.BatchId, CommonModel.GetBatch(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                            @*@Html.DropDownListFor(model => model.BatchId, CommonModel.GetBatch(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })*@
                                            @Html.ValidationMessageFor(model => model.BatchId, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.StateID, htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownListFor(model => model.StateID, CommonModel.GetState().Where(x => x.Value == "1"), null, htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.StateID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.DistrictID, htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownListFor(model => model.DistrictID, new List<SelectListItem>(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.DistrictID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TrainingAgencyID, htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownListFor(model => model.TrainingAgencyID, new List<SelectListItem>(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.TrainingAgencyID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TrainingCenterID, htmlAttributes: new { @class = "control-label col-md-12" })
                                        <div class="col-md-12">
                                            @Html.DropDownListFor(model => model.TrainingCenterID, new List<SelectListItem>(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.TrainingCenterID, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.TrainerId, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @*@Html.EditorFor(model => model.TrainerName, new { htmlAttributes = new { @class = "required form-control", @required = "required", @maxlength = "495" } })*@
                                            @Html.DropDownListFor(model => model.TrainerId, CommonModel.GetSP_GetAllTrainerList(0), null, htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                            @Html.ValidationMessageFor(model => model.TrainerId, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                </div>
                            </div>
                            <div class="card3">

                                <div class="form-group">
                                    @Html.LabelFor(model => model.MaritalStatus, htmlAttributes: new { @class = "control-label col-lg-12" })
                                    <div class="col-lg-12">
                                        @Html.DropDownListFor(model => model.MaritalStatus, CommonModel.GetMaritalStatus(0), "Select One", htmlAttributes: new { @class = "required form-control select2", @required = "required" })
                                        @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mark-devide"></div>
                                </div>
                                <div class="form-flex">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.NoofFamilyMembers, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.EditorFor(model => model.NoofFamilyMembers, new { htmlAttributes = new { @type = "number", @class = "form-control", min = "0", maxlength = "2", oninput = "javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" } })
                                            @Html.ValidationMessageFor(model => model.NoofFamilyMembers, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.AnnualHouseholdincome, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.EditorFor(model => model.AnnualHouseholdincome, new { htmlAttributes = new { @type = "text", @class = "form-control", onchange = "setTwoNumberDecimal()", min = "0", maxlength = "5", oninput = "javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" } })
                                            @Html.ValidationMessageFor(model => model.AnnualHouseholdincome, "", new { @class = "text-danger" })
                                        </div>
                                        <div class="mark-devide"></div>
                                    </div>
                                </div>
                                <div class="form-flex">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.PreTrainingStatus, htmlAttributes: new { @class = "control-label col-lg-12" })
                                        <div class="col-lg-12">
                                            @Html.DropDownListFor(model => model.PreTrainingStatus, CommonModel.GetPre_Training(0), "Select One", htmlAttributes: new { @class = "form-control select2" })
                                            @Html.ValidationMessageFor(model => model.PreTrainingStatus, "", new { @class = "text-danger" })
                                        </div>
                                    </div>
                                    <div class="mark-devide"></div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TargetGroup, htmlAttributes: new { @class = "control-label col-lg-12" })
                                    <div class="col-lg-12">
                                        @Html.DropDownListFor(model => model.TargetGroup, CommonModel.GetTargetGroup(0), "Select One", htmlAttributes: new { @class = "form-control select2" })
                                        @Html.ValidationMessageFor(model => model.TargetGroup, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="mark-devide"></div>
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Is_Placed, htmlAttributes: new { @class = "control-label col-lg-4" })
                                <div class="checkbox">
                                    @foreach (var item in CommonModel.GetYesNoValue())
                                    {
                                        <div class="input-spacer">
                                            @Html.RadioButtonFor(model => model.Is_Placed, item.Value, new { id = "IsPlaced" + item.Value, @required = "required" }) @item.Text
                                        </div>
                                    }
                                    @Html.ValidationMessageFor(model => model.Is_Placed, "", new { @class = "text-danger" })
                                </div>
                                <div class="mark-devide"></div>
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(model => model.Is_Offered, htmlAttributes: new { @class = "control-label col-lg-4" })
                                <div class="checkbox">
                                    @foreach (var item in CommonModel.GetYesNoValue())
                                    {
                                        <div class="input-spacer">
                                            @Html.RadioButtonFor(model => model.Is_Offered, item.Value, new { id = "IsOffered" + item.Value, @required = "required" }) @item.Text
                                        </div>
                                    }
                                    @Html.ValidationMessageFor(model => model.Is_Offered, "", new { @class = "text-danger" })
                                </div>
                                <div class="mark-devide"></div>
                            </div>

                            <div class="form-group">
                                <div class="col-md-12">
                                    <input type="submit" name="btnsubmit" value="Submit" id="btnsubmit" class="btn-register" />
                                    <a href="~/Participant/AddParticipant" class="btn-reset"><i class="fa fa-refresh"></i></a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Content/plugins/multiple-email/jquery.email.multiple.js"></script>
    <script src="~/Scripts/CustomValidator.js"></script>
    <script src="~/Scripts/Custom/Master.js"></script>
    @*<script src="~/Scripts/Custom/Employee.js"></script>*@
    <script>
       @* $('#DesignationId').val('@Model.DesignationId').select2();*@
        $(document).ready(function () {
            //GetYearList("Year", 0);  //GetMonthList("Month", 0);
            $('#AnnualHouseholdincome').on('input', function () {
                var value = $(this).val();
                var validValue = value.replace(/[^0-9.]/g, '');
                var decimalMatch = validValue.match(/^\d*(\.\d{0,2})?$/);
                if (decimalMatch) {
                    $(this).val(validValue);
                } else {
                    $(this).val(value.slice(0, -1));
                }
            });

              if ('@Model' != 'null') {
                  if ('@Model.ID' != '@Guid.Empty') {
                      /*    setTimeout(() => {*/
                      BindDistrict("DistrictID", '@Model.DistrictID', "1", '@Model.StateID');
                      // $("#DistrictID").trigger("change").select2();
                      BindTrainingAgency("TrainingAgencyID", '@Model.TrainingAgencyID', false);
                      BindTrainingCenter("TrainingCenterID", '@Model.TrainingCenterID', false, '@Model.DistrictID', '@Model.TrainingAgencyID');
                      if ('@Model.IsPlaced' != 'true') {
                          $("input[name=IsPlaced]").prop('checked', true);
                      }
                       if ('@Model.IsOffered' != 'true') {
                           $("input[name=IsOffered]").prop('checked', true);
                      }

                      $("input[name=PreTrainingStatus]").val('@Model.PreTrainingStatus');
                        $("input[name=TargetGroup]").val('@Model.TargetGroup');
                        $("input[name=MaritalStatus]").val('@Model.MaritalStatus');



                      /* }, "3000");*/
                  }
                  else {
                      $('#TrainingCenterID').val(''); $('#DistrictID').val('');
                      BindTrainingAgency("TrainingAgencyID", 0, false);
                      BindDistrict("DistrictID", 0, "1", "1");
                      BindTrainingCenter("TrainingCenterID", 0, false, $('#DistrictID').val(), $('#TrainingAgencyID').val());
                  }
              }
              else {
                  $('#TrainingCenterID').val(); $('#DistrictID').val();
                  BindTrainingAgency("TrainingAgencyID", 0, false);
                  BindDistrict("DistrictID", 0, "1", "1");
                  BindTrainingCenter("TrainingCenterID", 0, false, $('#DistrictID').val(), $('#TrainingAgencyID').val());
              }

            //$('#StateID').change(function () {
            //    $('#TrainingCenterID').val(); $('#DistrictID').val();
            //    BindDistrict("DistrictID", 0,"1", $(this).val());
            //});
            $('#TrainingAgencyID').change(function () {
                $('#TrainingCenterID').val();
                if ($('#DistrictID').val() != '' && $('#TrainingAgencyID').val()!='') {
                    BindTrainingCenter("TrainingCenterID", 0, false, $('#DistrictID').val(), $('#TrainingAgencyID').val());
                }
            });
            $('#EduQualificationID').change(function () {
                $('#EduQualOther').val('');
                if ($(this).val() == "4") {
                    $('#div-eq').css('display', 'block');
                    $('#EduQualOther').attr('required', 'required');
                }
                else {
                    $('#div-eq').css('display', 'none');
                    $('#EduQualOther').removeAttr('required', 'required');
                }
            });

            $("#formid").on("submit", function (event) {
                event.preventDefault();
                //jQuery.event.trigger("ajaxStart");
                debugger;
                //var formDataJson = $('#formid').serialize();//formData.append('tax_file', $('input[type=file]')[0].files[0]);

                //var vl = $("#formid").validate();
                ////var formData = new FormData($('#formid')[0]);
                var isvalid = $("#formid").valid(); //$('#formid').validate();
                var formData = $(this).serialize();
                //var pts = $('input[name="PreTrainingStatus"]:checked').val();
                //formData.append('', $('#').val());

                if (isvalid) {
                    $.ajax({
                        type: "POST",
                        url: document.baseURI + "/Participant/AddParticipant/",
                        data: formData,
                        //use contentType, processData for sure.
                        //contentType: false,
                        // processData: false,
                        dataType: 'json',
                        //contentType: "application/json; charset=utf-8",
                        success: function (resp) {
                            //  CreateToasterMessage("Registration", resp.Message, resp.StatusType);
                            if (resp.StatusType == "success") {
                                toastr.success("Success", resp.Message);
                                //jQuery.event.trigger("ajaxStop");
                                if ('@Model.ID'=='@Guid.Empty') {
                                    $("#formid")[0].reset();
                                    $('#EduQualOther').removeAttr('required', 'required');
                                    BindDistrict("DistrictID", 0, "1", "1");
                                    $('#TrainingCenterID').val(''); $('#DistrictID').val(''); $('#EduQualificationID').val(''); $('#CourseEnrolledID').val(''); $('#BatchId').val('');
                                    BindTrainingAgency("TrainingAgencyID", 0, false);
                                    BindTrainingCenter("TrainingCenterID", 0, false, $('#DistrictID').val(), $('#TrainingAgencyID').val());
                                }
                            }
                            else {
                                toastr.error("Error", resp.Message);
                            }
                        },
                        error: function (req, error) {
                            if (error === 'error') { error = req.statusText; }
                            var errormsg = 'There was a communication error: ' + error;
                            // CreateToasterMessage("Error", errormsg, "error");
                            toastr.error("Error", errormsg);
                            //jQuery.event.trigger("ajaxStop");
                            return false;
                        }
                    });
                }
                else {
                    //CreateToasterMessage("Error", "All Record Validate !!", "error");
                    toastr.error("Error", "All Record Validate !!");
                   // jQuery.event.trigger("ajaxStop");
                    return false;
                }
            });



        });


        function setTwoNumberDecimal(event) {
            if (this.value != null) {
                this.value = parseFloat(this.value).toFixed(2);
            }
        }


    </script>
}
