@model Hunarmis.Models.ParticipantModel
@using Hunarmis.Manager;
@{
    ViewBag.Title = "Participant";
    ViewBag.TitleTab2 = "Additional Information";
    ViewBag.TitleIcon = "fa fa-user";
    ViewBag.SemiTitle = "Participant List";
    ViewBag.SemiTitleLink = "/Participant/ParticipantList";
    bool IsSadmin = CommonModel.IsRoleLogin() == "all" ? true : false;
    var strreadonly = Model.partChildModel.Child_ParticipantId_pk == Guid.Empty ? "pointer-events: none;" : "";
}
<link href="~/Content/plugins/multiple-email/email.multiple.css" rel="stylesheet" />
<style>
    .form-group label {
        color: #555;
        margin: 0px;
        font-size: 12px;
    }

    .btn-group, .multiselect {
        width: 100% !important;
        text-align: left !important;
    }

    .multiselect {
        width: 100% !important;
        text-align: left !important;
        height: 33px;
    }

    .select2-container .select2-selection--single {
        height: 33px;
    }
</style>
<div id="page-content">
    <div class="container-fluid">
        <div class="row mt-20">
            <div class="col-lg-12 col-md-12 col-sm-12 col-12">
                <div class="card card-box p-0">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-xs-12 col-md-12">
                                <ul class="tabs">
                                    <li class="tab-link active" data-tab="tab-1"> <i class="fa fa-users spacerright2"></i> @ViewBag.Title Information</li>
                                    <li class="tab-link" data-tab="tab-2" style="@strreadonly"><i class="fa fa-users spacerright2"></i> @ViewBag.TitleTab2</li>
                                </ul>
                                <div class="tab-content active" id="tab-1">
                                    @using (Html.BeginForm("AddParticipant", "Participant", FormMethod.Post, new { @class = "loader", enctype = "multipart/form-data", @id = "formid" }))
                                    {
                                        <div class="col-md-12">@Html.Partial("_Alerts")</div>
                                        <div class="col-xs-12 col-md-12">
                                            @Html.AntiForgeryToken()
                                            @Html.HiddenFor(m => m.ID)
                                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                            @*<p class="bord-btm pad-ver text-main text-bold"><i class="fa fa-users spacerright2"></i>@ViewBag.Title Information</p>*@
                                        </div>
                                        <div class="row">
                                            @if (Model.ID != Guid.Empty)
                                            {
                                                <div class="col-xs-2 col-md-4">
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.RegID, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.RegID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                        @Html.ValidationMessageFor(model => model.RegID, "", new { @class = "text-danger" })
                                                        <div class="mark-devide"></div>
                                                    </div>
                                                </div>
                                            }
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.FullName, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.FullName, new { htmlAttributes = new { @class = "required form-control", @required = "required" } })
                                                    @Html.ValidationMessageFor(model => model.FullName, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group gender-box">
                                                    <label>Gender</label>
                                                    <div class="checkbox form-control" style="margin:0px;">
                                                        @foreach (var item in CommonModel.GetGender(false))
                                                        {
                                                            <div class="check-box" style="margin:0px 0px; display:inline-block;">
                                                                @Html.RadioButtonFor(model => model.Gender, item.Value, new { id = "Gender" + item.Value, @required = "required" }) @item.Text
                                                            </div>
                                                        }
                                                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.PhoneNo, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.PhoneNo, new { htmlAttributes = new { @type = "number", @class = "required form-control", @required = "required", minlength = "10", @maxlength = "10" } })
                                                    @Html.ValidationMessageFor(model => model.PhoneNo, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.AlternatePhoneNo, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.AlternatePhoneNo, new { htmlAttributes = new { @type = "number", @class = " form-control", @min = "10", @maxlength = "10" } })
                                                    @Html.ValidationMessageFor(model => model.AlternatePhoneNo, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Age, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.Age, new { htmlAttributes = new { @type = "number", @class = "required form-control", @required = "required", @maxlength = "2" } })
                                                    @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EmailID, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.EmailID, new { htmlAttributes = new { @type = "email", @class = "required form-control", @required = "required", @maxlength = "150" } })
                                                    @Html.ValidationMessageFor(model => model.EmailID, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.AadharCardNo, htmlAttributes: new { @class = "control-label" })
                                                    @*@Html.PasswordFor(model => model.AadharCardNo, new { @type = "password", @class = "required form-control", @required = "required", @min = "12", @maxlength = "12" })*@
                                                    @Html.TextBoxFor(model => model.AadharCardNo, new { @type = "number", @class = "required form-control", @required = "required", @min = "12", @maxlength = "12" })
                                                    @Html.ValidationMessageFor(model => model.AadharCardNo, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.SelfImage, htmlAttributes: new { @class = "control-label" })
                                                    @if (Model.ID == Guid.Empty)
                                                    {
                                                        <input type="file" class="SelfImage form-control" name="SelfImage" id="SelfImage" accept="image/*" />
                                                        @Html.ValidationMessageFor(model => model.SelfImage, "", new { @class = "text-danger" })
                                                    }
                                                    else
                                                    {
                                                        <input type="file" class="UploadCheckFile form-control" name="SelfImage" id="SelfImage" accept="image/*," />
                                                        if (!string.IsNullOrWhiteSpace(Model.SelfImagePath))
                                                        {
                                                            <a href="@(CommonModel.GetBaseUrl()+Model.SelfImagePath)" target="_blank"><i class="fa fa-download"></i></a>
                                                        }
                                                    }
                                                    @Html.ValidationMessageFor(model => model.SelfImage, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>

                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EduQualificationID, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.EduQualificationID, CommonModel.GetEducational(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.EduQualificationID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4" id="div-eq" style="display:none;">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.EduQualOther, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.EduQualOther, new { htmlAttributes = new { @class = "required form-control", @maxlength = "500" } })
                                                    @Html.ValidationMessageFor(model => model.EduQualificationID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.CourseEnrolledID, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.CourseEnrolledID, CommonModel.GetCourses(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.CourseEnrolledID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                @if (IsSadmin)
                                                {
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.BatchId, htmlAttributes: new { @class = "control-label" })
                                                        @Html.DropDownListFor(model => model.BatchId, CommonModel.GetBatch(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                        @*@Html.DropDownListFor(model => model.BatchId, CommonModel.GetBatch(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })*@
                                                        @Html.ValidationMessageFor(model => model.BatchId, "", new { @class = "text-danger" })
                                                    </div>
                                                }
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.StateID, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.StateID, CommonModel.GetState().Where(x => x.Value == "1"), null, htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.StateID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4" style="display:none;">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.DistrictID, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.DistrictID, new List<SelectListItem>(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.DistrictID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4" style="display:none;">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.TrainingAgencyID, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.TrainingAgencyID, new List<SelectListItem>(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.TrainingAgencyID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.TrainingCenterID, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.TrainingCenterID, new List<SelectListItem>(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.TrainingCenterID, "", new { @class = "text-danger" })
                                                </div>
                                            </div>
                                            @if (IsSadmin)
                                            {
                                                <div class="col-xs-2 col-md-4">
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.TrainerId, htmlAttributes: new { @class = "control-label" })
                                                        @*@Html.EditorFor(model => model.TrainerName, new { htmlAttributes = new { @class = "required form-control", @required = "required", @maxlength = "495" } })*@
                                                        @Html.DropDownListFor(model => model.TrainerId, CommonModel.GetSP_GetAllTrainerList(0), null, htmlAttributes: new { @class = "form-control select2" })
                                                        @Html.ValidationMessageFor(model => model.TrainerId, "", new { @class = "text-danger" })
                                                        <div class="mark-devide"></div>
                                                    </div>
                                                </div>
                                            }
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.MaritalStatus, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.MaritalStatus, CommonModel.GetMaritalStatus(0), "Select One", htmlAttributes: new { @class = "required form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.MaritalStatus, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.NoofFamilyMembers, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.NoofFamilyMembers, new { htmlAttributes = new { @type = "number", @class = "form-control", min = "0", maxlength = "2", oninput = "javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" } })
                                                    @Html.ValidationMessageFor(model => model.NoofFamilyMembers, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.AnnualHouseholdincome, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.AnnualHouseholdincome, new { htmlAttributes = new { @type = "text", @class = "form-control", onchange = "setTwoNumberDecimal()", min = "0", maxlength = "10", oninput = "javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" } })
                                                    @Html.ValidationMessageFor(model => model.AnnualHouseholdincome, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.PreTrainingStatus, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.PreTrainingStatus, CommonModel.GetPre_Training(0), "Select One", htmlAttributes: new { @class = "form-control select2" })
                                                    @Html.ValidationMessageFor(model => model.PreTrainingStatus, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.TargetGroup, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.TargetGroup, CommonModel.GetTargetGroup(0), "Select One", htmlAttributes: new { @class = "form-control select2" })
                                                    @Html.ValidationMessageFor(model => model.TargetGroup, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.Is_Placed, htmlAttributes: new { @class = "control-label" })
                                                    <div class="checkbox form-control" style="margin:0px;">
                                                        @foreach (var item in CommonModel.GetYesNoValue())
                                                        {
                                                            <div class="input-spacer" style="margin:0px; display:inline-block">
                                                                @Html.RadioButtonFor(model => model.Is_Placed, item.Value, new { id = "IsPlaced" + item.Value, @required = "required" }) @item.Text
                                                            </div>
                                                        }
                                                        @Html.ValidationMessageFor(model => model.Is_Placed, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                @if (IsSadmin)
                                                {
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.Is_Offered, htmlAttributes: new { @class = "control-label" })
                                                        <div class="checkbox form-control" style="margin-top: 0px; margin-bottom: 0px;">
                                                            @foreach (var item in CommonModel.GetYesNoValue())
                                                            {
                                                                <div class="input-spacer" style="margin:0px; display:inline-block">
                                                                    @Html.RadioButtonFor(model => model.Is_Offered, item.Value, new { id = "IsOffered" + item.Value, @required = "required" }) @item.Text
                                                                </div>
                                                            }
                                                            @Html.ValidationMessageFor(model => model.Is_Offered, "", new { @class = "text-danger" })
                                                        </div>
                                                        <div class="mark-devide"></div>
                                                    </div>
                                                }
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                @if (IsSadmin)
                                                {
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.AssessmentScore, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.AssessmentScore, new { htmlAttributes = new { @type = "number", @class = " form-control", @maxlength = "3" } })
                                                        @Html.ValidationMessageFor(model => model.AssessmentScore, "", new { @class = "text-danger" })
                                                        <div class="mark-devide"></div>
                                                    </div>
                                                }
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    <label>&nbsp;</label>
                                                    <div>
                                                        <input type="submit" name="btnsubmit" value="Submit" id="btnsubmit" class="btn-register" />
                                                        <a href="~/Participant/AddParticipant" class="btn-reset"><i class="fa fa-refresh"></i></a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div id="tab-2" class="tab-content">
                                    @using (Html.BeginForm("AddParticipantChild", "Participant", FormMethod.Post, new { @class = "loader", enctype = "multipart/form-data", @id = "formchildid" }))
                                    {
                                        <div class="row">
                                            <div class="col-md-12">@Html.Partial("_Alerts")</div>
                                            <div class="col-xs-12 col-md-12">
                                                @Html.AntiForgeryToken()
                                                @Html.HiddenFor(m => m.partChildModel.ParticipantId)
                                                @Html.HiddenFor(m => m.partChildModel.Child_ParticipantId_pk)

                                                @Html.HiddenFor(m => m.partChildModel.NativeLanguage_hd)
                                                @Html.HiddenFor(m => m.partChildModel.Languagesknown_hd)
                                                @Html.HiddenFor(m => m.partChildModel.KnowledgeofEnglishLanguage_hd)
                                                @Html.HiddenFor(m => m.partChildModel.HouseholdAssetOwnership_hd)
                                                @Html.HiddenFor(m => m.partChildModel.AccesstoServices_hd)
                                                @Html.HiddenFor(m => m.partChildModel.Whichskillingcourseshaveyoudoneearlier_hd)
                                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                                @*<p class="bord-btm pad-ver text-main text-bold"><i class="fa fa-users spacerright2"></i>@ViewBag.TitleTab2</p>*@
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                @if (Model.ID != Guid.Empty)
                                                {
                                                    <div class="form-group">
                                                        @Html.LabelFor(model => model.RegID, htmlAttributes: new { @class = "control-label" })
                                                        @Html.EditorFor(model => model.RegID, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                                                        @Html.ValidationMessageFor(model => model.RegID, "", new { @class = "text-danger" })
                                                        <div class="mark-devide"></div>
                                                    </div>
                                                }
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.NativeLanguage, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.partChildModel.NativeLanguage, CommonModel.GetLanguage(2), htmlAttributes: new { @class = "form-control multiple", @required = "required", multiple = "multiple" })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.NativeLanguage, "", new { @class = "text-danger" })
                                                    @Html.EditorFor(model => model.partChildModel.NativeLanguage_Other, new { htmlAttributes = new { @style = "display:none;", @class = " form-control" } })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.Address, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.Address, new { htmlAttributes = new { @class = " form-control" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.Address, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.StateId, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.partChildModel.StateId, new List<SelectListItem>(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.StateId, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.DistrictId, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.partChildModel.DistrictId, new List<SelectListItem>(), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.DistrictId, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.Pincode, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.Pincode, new { htmlAttributes = new { @type = "number", @class = "form-control", min = "0", maxlength = "6", oninput = "javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.Pincode, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.City, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.City, new { htmlAttributes = new { @class = " form-control" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.City, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.Village, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.Village, new { htmlAttributes = new { @class = " form-control" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.Village, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.EmergencyPersonName, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.EmergencyPersonName, new { htmlAttributes = new { @class = " form-control" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.EmergencyPersonName, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.EmergencyContactNo, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.EmergencyContactNo, new { htmlAttributes = new { @type = "number", @class = "required form-control", @required = "required", minlength = "10", @maxlength = "10" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.EmergencyContactNo, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.EmergencyRelationship, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.EmergencyRelationship, new { htmlAttributes = new { @class = " form-control" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.EmergencyRelationship, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.EmergencyMonthlyIncome, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.EmergencyMonthlyIncome, new { htmlAttributes = new { @class = " form-control" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.EmergencyMonthlyIncome, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.IDType, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.partChildModel.IDType, CommonModel.GetIDType(1), htmlAttributes: new { @class = "form-control", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.IDType, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.IDNo, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.IDNo, new { htmlAttributes = new { @class = " form-control" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.IDNo, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.SchoolPassoutYear, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.SchoolPassoutYear, new { htmlAttributes = new { @type = "number", @class = "form-control", min = "0", maxlength = "4", oninput = "javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.SchoolPassoutYear, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.MonthlyIncome, htmlAttributes: new { @class = "control-label" })
                                                    @Html.EditorFor(model => model.partChildModel.MonthlyIncome, new { htmlAttributes = new { @type = "number", @class = "form-control", min = "0", maxlength = "10", oninput = "javascript: if (this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" } })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.MonthlyIncome, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.HouseholdAssetOwnership, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.partChildModel.HouseholdAssetOwnership, CommonModel.GetHouseholdAssetOwnership(2), htmlAttributes: new { @class = "form-control multiple", @required = "required", multiple = "multiple" })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.HouseholdAssetOwnership, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.AccesstoServices, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.partChildModel.AccesstoServices, CommonModel.GetAccesstoServices(false), htmlAttributes: new { @class = "form-control multiple", @required = "required", multiple = "multiple" })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.AccesstoServices, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group gender-box">
                                                    <label>@Hunarmis.Models.DplyPartName.HaveYouWorkedEarliear</label>
                                                    <div class="checkbox form-control" style="margin:0px;">
                                                        @foreach (var item in CommonModel.GetYesNoValue())
                                                        {
                                                            <div class="check-box" style="display:inline-block;margin:0px;">
                                                                @Html.RadioButtonFor(model => model.partChildModel.HaveYouWorkedEarliear, item.Value, new { id = "HaveYouWorkedEarliear" + item.Value, @required = "required" }) @item.Text
                                                            </div>
                                                        }
                                                        @Html.ValidationMessageFor(model => model.partChildModel.HaveYouWorkedEarliear, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.WorkExperience, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.partChildModel.WorkExperience, CommonModel.GetWorkExperience(1), "Select One", htmlAttributes: new { @class = "form-control select2", @required = "required" })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.WorkExperience, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group gender-box">
                                                    <label>@Hunarmis.Models.DplyPartName.HomeTown</label>
                                                    <div class="checkbox form-control" style="margin:0px;">
                                                        @foreach (var item in CommonModel.GetYesNoValue())
                                                        {
                                                            <div class="check-box" style="display:inline-block;margin:0px;">
                                                                @Html.RadioButtonFor(model => model.partChildModel.HomeTown, item.Value, new { id = "HomeTown" + item.Value, @required = "required" }) @item.Text
                                                            </div>
                                                        }
                                                        @Html.ValidationMessageFor(model => model.partChildModel.HomeTown, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group gender-box">
                                                    <label>@Hunarmis.Models.DplyPartName.AreyouIntrestedingettingajob</label>
                                                    <div class="checkbox form-control" style="margin:0px;">
                                                        @foreach (var item in CommonModel.GetYesNoValue())
                                                        {
                                                            <div class="check-box" style="display:inline-block;margin:0px;">
                                                                @Html.RadioButtonFor(model => model.partChildModel.AreyouIntrestedingettingajob, item.Value, new { id = "AreyouIntrestedingettingajob" + item.Value, @required = "required" }) @item.Text
                                                            </div>
                                                        }
                                                        @Html.ValidationMessageFor(model => model.partChildModel.AreyouIntrestedingettingajob, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group gender-box">
                                                    <label>@Hunarmis.Models.DplyPartName.Willyoubeinterestedinrelocatingforajob</label>
                                                    <div class="checkbox form-control" style="margin:0px;">
                                                        @foreach (var item in CommonModel.GetYesNoValue())
                                                        {
                                                            <div class="check-box" style="display:inline-block;margin:0px;">
                                                                @Html.RadioButtonFor(model => model.partChildModel.Willyoubeinterestedinrelocatingforajob, item.Value, new { id = "AreyouIntrestedingettingajob" + item.Value, @required = "required" }) @item.Text
                                                            </div>
                                                        }
                                                        @Html.ValidationMessageFor(model => model.partChildModel.Willyoubeinterestedinrelocatingforajob, "", new { @class = "text-danger" })
                                                    </div>
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.Languagesknown, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.partChildModel.Languagesknown, CommonModel.GetLanguage(2), htmlAttributes: new { @class = "form-control multiple", @required = "required", multiple = "multiple" })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.Languagesknown, "", new { @class = "text-danger" })
                                                    @Html.EditorFor(model => model.partChildModel.Languagesknown_Other, new { htmlAttributes = new { @style = "display:none;", @class = " form-control" } })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.KnowledgeofEnglishLanguage, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.partChildModel.KnowledgeofEnglishLanguage, CommonModel.GetKnowledgeofEnglishLanguage(2), htmlAttributes: new { @class = "form-control multiple", @required = "required", multiple = "multiple" })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.KnowledgeofEnglishLanguage, "", new { @class = "text-danger" })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    @Html.LabelFor(model => model.partChildModel.Whichskillingcourseshaveyoudoneearlier, htmlAttributes: new { @class = "control-label" })
                                                    @Html.DropDownListFor(model => model.partChildModel.Whichskillingcourseshaveyoudoneearlier, CommonModel.GetWhichskillingcourseshaveyoudoneearlier(2), htmlAttributes: new { @class = "form-control multiple", @required = "required", multiple = "multiple" })
                                                    @Html.ValidationMessageFor(model => model.partChildModel.Whichskillingcourseshaveyoudoneearlier, "", new { @class = "text-danger" })
                                                    @Html.EditorFor(model => model.partChildModel.Whichskillingcourseshaveyoudoneearlier_Other, new { htmlAttributes = new { @style = "display:none;", @class = " form-control" } })
                                                    <div class="mark-devide"></div>
                                                </div>
                                            </div>
                                            <div class="col-xs-2 col-md-4">
                                                <div class="form-group">
                                                    <label>&nbsp;</label>
                                                    <div>
                                                        <input type="submit" name="btnsubmit" value="Submit" id="btnsubmit" class="btn-register" />
                                                        <a href="~/Participant/AddParticipant?Id=@Model.partChildModel.ParticipantId" class="btn-reset"><i class="fa fa-refresh"></i></a>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>


@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Content/plugins/multiple-email/jquery.email.multiple.js"></script>
    <script src="~/Scripts/CustomValidator.js"></script>
    <script src="~/Scripts/Custom/Master.js"></script>
    @*<script src="~/Scripts/Custom/Employee.js"></script>*@
    <script>
       @* $('#DesignationId').val('@Model.DesignationId').select2();*@
        $(document).ready(function () {
            //GetYearList("Year", 0);  //GetMonthList("Month", 0);
            $('#AnnualHouseholdincome').on('input', function () {
                var value = $(this).val();
                var validValue = value.replace(/[^0-9.]/g, '');
                var decimalMatch = validValue.match(/^\d*(\.\d{0,2})?$/);
                if (decimalMatch) {
                    $(this).val(validValue);
                } else {
                    $(this).val(value.slice(0, -1));
                }
            });

            if ('@Model' != 'null') {
                  if ('@Model.ID' != '@Guid.Empty') {
                      /*    setTimeout(() => {*/
                      debugger;
                      $('#partChildModel_ParticipantId').val('@Model.ID');
                      //BindDistrict("DistrictID", '@Model.DistrictID', "1", '@Model.StateID');
                      // $("#DistrictID").trigger("change").select2();
                      //BindTrainingAgency("TrainingAgencyID", '@Model.TrainingAgencyID', false);
                      //BindTrainingCenter("TrainingCenterID", '@Model.TrainingCenterID', false, '@Model.DistrictID', '@Model.TrainingAgencyID');
                      BindTrainingCentersWiseLists("TrainingCenterID", 0, 1, $('#StateID').val(), '@CommonModel.GetUserRole()','@MvcApplication.CUser.MappedTCenterIds');

                      if ('@Model.IsPlaced' != 'true') {
                          $("input[name=IsPlaced]").prop('checked', true);
                      }
                       if ('@Model.IsOffered' != 'true') {
                           $("input[name=IsOffered]").prop('checked', true);
                      }

                      $("Select[name=PreTrainingStatus]").val('@Model.PreTrainingStatus');
                      $("Select[name=TargetGroup]").val('@Model.TargetGroup');
                      $("Select[name=MaritalStatus]").val('@Model.MaritalStatus');
                      $("Select[name=TrainingCenterID]").val('@Model.TrainingCenterID');
                      debugger;
                      var ahhic = '@Model.AnnualHouseholdincome';
                      if (ahhic != '' && ahhic != 'null') {
                          $('#AnnualHouseholdincome').val(parseInt(ahhic));
                      }

                      /* Tab - 2 */
                      setTimeout(function () {
                          $('.multiple').multiselect({
                              includeSelectAllOption: false,
                          enableFiltering: true,
                          includeFilterClearBtn: true,
                          enableCaseInsensitiveFiltering: true
                          });
                           BindStateList("partChildModel_StateId", 0, false);
                             if ('@Model.partChildModel.Child_ParticipantId_pk'!='@Guid.Empty') {
                                 $('#partChildModel_StateId').val('@Model.partChildModel.StateId');
                                 BindDistrict("partChildModel_DistrictId", 0, 1, '@Model.partChildModel.StateId', 2);
                                 $('#partChildModel_DistrictId').val('@Model.partChildModel.DistrictId');
                          }
                          if ('@Model.partChildModel.MonthlyIncome' != '' && '@Model.partChildModel.MonthlyIncome' != 'null') {
                              var amount1 = '@Model.partChildModel.MonthlyIncome';
                              $('#partChildModel_MonthlyIncome').val(parseInt(amount1));
                          } if ('@Model.partChildModel.EmergencyMonthlyIncome' != '' && '@Model.partChildModel.EmergencyMonthlyIncome' != 'null') {
                               var amount1 = '@Model.partChildModel.MonthlyIncome';
                              $('#partChildModel_EmergencyMonthlyIncome').val(parseInt(amount1));
                          }

                          var arr = '@Model.partChildModel.NativeLanguage';
                          var selectedOptions = arr.split(',');
                          $('#partChildModel_NativeLanguage').val(selectedOptions);
                          $("#partChildModel_NativeLanguage").multiselect('refresh');

                          var arr1 = '@Model.partChildModel.KnowledgeofEnglishLanguage';
                          var selectedOptions1 = arr1.split(',');
                          $('#partChildModel_KnowledgeofEnglishLanguage').val(selectedOptions1);
                          $("#partChildModel_KnowledgeofEnglishLanguage").multiselect('refresh');
                            var arr2 = '@Model.partChildModel.Languagesknown';
                            var selectedOptions2 = arr2.split(',');
                          $('#partChildModel_Languagesknown').val(selectedOptions2);
                          $("#partChildModel_Languagesknown").multiselect('refresh');
                            var arr3 = '@Model.partChildModel.HouseholdAssetOwnership';
                            var selectedOptions3 = arr3.split(',');
                        $('#partChildModel_HouseholdAssetOwnership').val(selectedOptions3);
                        $("#partChildModel_HouseholdAssetOwnership").multiselect('refresh');
                            var arr4 = '@Model.partChildModel.AccesstoServices';
                            var selectedOptions4 = arr4.split(',');
                        $('#partChildModel_AccesstoServices').val(selectedOptions4);
                          $("#partChildModel_AccesstoServices").multiselect('refresh');

                              var arr5 = '@Model.partChildModel.Whichskillingcourseshaveyoudoneearlier';
                              var selectedOptions5 = arr5.split(',');
                            $('#partChildModel_Whichskillingcourseshaveyoudoneearlier').val(selectedOptions5);
                            $("#partChildModel_Whichskillingcourseshaveyoudoneearlier").multiselect('refresh');

                      }, "2000");

                      /* }, "3000");*/
                  }
                  else {
                      $('#TrainingCenterID').val(''); $('#DistrictID').val('');
                      //BindTrainingAgency("TrainingAgencyID", 0, false);
                     // BindDistrict("DistrictID", 0, "1", "1");
                      //BindTrainingCenter("TrainingCenterID", 0, false, $('#DistrictID').val(), $('#TrainingAgencyID').val());
                      BindTrainingCentersWiseLists("TrainingCenterID", 0, 1, $('#StateID').val(), '@CommonModel.GetUserRole()', '@MvcApplication.CUser.MappedTCenterIds');
                  }
              }
              else {
                  $('#TrainingCenterID').val(); $('#DistrictID').val();
                 // BindTrainingAgency("TrainingAgencyID", 0, false);
                 // BindDistrict("DistrictID", 0, "1", "1");
                  //BindTrainingCenter("TrainingCenterID", 0, false, $('#DistrictID').val(), $('#TrainingAgencyID').val());
                BindTrainingCentersWiseLists("TrainingCenterID", 0, 1, $('#StateID').val(),'@CommonModel.GetUserRole()','@MvcApplication.CUser.MappedTCenterIds');
              }

            //$('#StateID').change(function () {
            //    $('#TrainingCenterID').val(); $('#DistrictID').val();
            //    BindDistrict("DistrictID", 0,"1", $(this).val());
            //});
            //$('#TrainingAgencyID').change(function () {
            //    $('#TrainingCenterID').val();
            //    if ($('#DistrictID').val() != '' && $('#TrainingAgencyID').val()!='') {
            //        BindTrainingCenter("TrainingCenterID", 0, false, $('#DistrictID').val(), $('#TrainingAgencyID').val());
            //    }
            //});
            $('#EduQualificationID').change(function () {
                $('#EduQualOther').val('');
                if ($(this).val() == "4") {
                    $('#div-eq').css('display', 'block');
                    $('#EduQualOther').attr('required', 'required');
                }
                else {
                    $('#div-eq').css('display', 'none');
                    $('#EduQualOther').removeAttr('required', 'required');
                }
            });

            $("#formid").on("submit", function (event) {
                event.preventDefault();
                //jQuery.event.trigger("ajaxStart");
                debugger;
                //var formDataJson = $('#formid').serialize();//formData.append('tax_file', $('input[type=file]')[0].files[0]);

                //var vl = $("#formid").validate();
                ////var formData = new FormData($('#formid')[0]);
                var isvalid = $("#formid").valid(); //$('#formid').validate();

                //var pts = $('input[name="PreTrainingStatus"]:checked').val();
                //formData.append('', $('#').val());

               // var formData = $(this).serialize();
                var formData = new FormData(this);
                if ($('#SelfImage').get(0).files.length != 0) {
                    formData.append('SelfImage', $('#SelfImage')[0].files[0]);
                }


                if (isvalid) {
                    $.ajax({
                        type: "POST",
                        url: document.baseURI + "/Participant/AddParticipant/",
                        data: formData,
                        //use contentType, processData for sure.
                        contentType: false,
                         processData: false,
                       // dataType: 'json',
                        //contentType: "application/json; charset=utf-8",
                        success: function (resp) {
                            //  CreateToasterMessage("Registration", resp.Message, resp.StatusType);
                            if (resp.StatusType == "success") {
                                toastr.success("Success", resp.Message);
                                //jQuery.event.trigger("ajaxStop");
                                if ('@Model.ID'=='@Guid.Empty') {
                                    $("#formid")[0].reset();
                                    $('#EduQualOther').removeAttr('required', 'required');
                                    BindDistrict("DistrictID", 0, "1", "1");
                                    $('#TrainingCenterID').val(''); $('#DistrictID').val(''); $('#EduQualificationID').val(''); $('#CourseEnrolledID').val(''); $('#BatchId').val('');
                                    BindTrainingAgency("TrainingAgencyID", 0, false);
                                    BindTrainingCenter("TrainingCenterID", 0, false, $('#DistrictID').val(), $('#TrainingAgencyID').val());
                                }
                            }
                            else {
                                toastr.error("Error", resp.Message);
                            }
                        },
                        error: function (req, error) {
                            if (error === 'error') { error = req.statusText; }
                            var errormsg = 'There was a communication error: ' + error;
                            // CreateToasterMessage("Error", errormsg, "error");
                            toastr.error("Error", errormsg);
                            //jQuery.event.trigger("ajaxStop");
                            return false;
                        }
                    });
                }
                else {
                    //CreateToasterMessage("Error", "All Record Validate !!", "error");
                    toastr.error("Error", "All Record Validate !!");
                   // jQuery.event.trigger("ajaxStop");
                    return false;
                }
            });



            //Tab 2 Other Onchange
            $('#partChildModel_StateId').change(function () {
                BindDistrict("partChildModel_DistrictId", 0, 1, $('#partChildModel_StateId').val(), 2);
            });

            $('#partChildModel_NativeLanguage').change(function () {
                $('#partChildModel_NativeLanguage_Other').val('');
                $('#partChildModel_NativeLanguage_Other').hide();

                var selected = $("#partChildModel_NativeLanguage option:selected");    /*Current Selected Value*/
                selected.each(function () {
                    if ($(this).val() == "4") {
                        $('#partChildModel_NativeLanguage_Other').show();
                        $('#partChildModel_NativeLanguage_Other').attr('required', 'required');
                    }
                    else {
                        $('#partChildModel_NativeLanguage_Other').removeAttr('required', 'required');
                    }
                });
            });
            $('#partChildModel_Languagesknown').change(function () {
                $('#partChildModel_Languagesknown_Other').val('');
                $('#partChildModel_Languagesknown_Other').hide();
                var selected = $("#partChildModel_Languagesknown option:selected");    /*Current Selected Value*/
                selected.each(function () {
                    if ($(this).val() == "4") {
                        $('#partChildModel_Languagesknown_Other').show();
                        $('#partChildModel_Languagesknown_Other').attr('required', 'required');
                    }
                    else {
                        $('#partChildModel_Languagesknown_Other').removeAttr('required', 'required');
                    }

                });

            });
            $('#partChildModel_KnowledgeofEnglishLanguage').change(function () {
                var selected = $("#partChildModel_KnowledgeofEnglishLanguage option:selected");    /*Current Selected Value*/
                if (selected.length==0) {
                    $('#partChildModel_KnowledgeofEnglishLanguage option').prop('disabled', false);
                }
                selected.each(function () {
                    debugger;
                    var disableOptions = ['1', '2', '3'];
                    if ($(this).val() == "4") {
                        //// Disable the specified options
                        $.each(disableOptions, function (index, value) {
                            $('#partChildModel_KnowledgeofEnglishLanguage').multiselect('deselect', value);
                            $('#partChildModel_KnowledgeofEnglishLanguage option[value="' + value + '"]').prop('disabled', true);
                        });
                    }
                    else {
                        $('#partChildModel_KnowledgeofEnglishLanguage option').prop('disabled', false);
                    }
                });

                $('#partChildModel_KnowledgeofEnglishLanguage').multiselect('refresh');
            });
            $('#partChildModel_Whichskillingcourseshaveyoudoneearlier').change(function () {
                $('#partChildModel_Whichskillingcourseshaveyoudoneearlier_Other').val('');
                $('#partChildModel_Whichskillingcourseshaveyoudoneearlier_Other').hide();
                var selected = $("#partChildModel_Languagesknown option:selected");    /*Current Selected Value*/
                selected.each(function () {
                    if ($(this).val() == "16") {
                        $('#partChildModel_Whichskillingcourseshaveyoudoneearlier_Other').show();
                        $('#partChildModel_Whichskillingcourseshaveyoudoneearlier_Other').attr('required', 'required');
                    }
                    else {
                        $('#partChildModel_Whichskillingcourseshaveyoudoneearlier_Other').removeAttr('required', 'required');
                    }
                });

            });

            //Tab 2 Other Details submitted formchildid
            $("#formchildid").on("submit", function (event) {
                 event.preventDefault();
                 //jQuery.event.trigger("ajaxStart");
                 debugger;
                 //var formDataJson = $('#formchildid').serialize();//formData.append('tax_file', $('input[type=file]')[0].files[0]);

                 //var vl = $("#formchildid").validate();
                 ////var formData = new FormData($('#formchildid')[0]);
                var isvalid = $("#formchildid").valid(); //$('#formchildid').validate();
                // var formData = $(this).serialize();

                 //var pts = $('input[name="PreTrainingStatus"]:checked').val();
                //formData.append('', $('#').val());

                // Get selected options from the multi-select dropdown
                var marr = "";
                var selectedOptions = $("#partChildModel_NativeLanguage option:selected");
                marr = "";
                if (selectedOptions) {
                    $.each(selectedOptions, function (index, item) {
                        marr += index == 0 ? item.value : ',' + item.value ;
                    });
                    $('#partChildModel_NativeLanguage_hd').val(marr);
                }
                var selectedOptions1 = $("#partChildModel_HouseholdAssetOwnership option:selected");
                marr = "";
                if (selectedOptions1) {
                    $.each(selectedOptions1, function (index, item) {
                        marr += index == 0 ? item.value :  ',' + item.value;
                    });
                    $('#partChildModel_HouseholdAssetOwnership_hd').val(marr);
                }
                var selectedOptions2 = $("#partChildModel_AccesstoServices option:selected");
                marr = "";
                if (selectedOptions2) {
                    $.each(selectedOptions2, function (index, item) {
                        marr += index == 0 ? item.value : ',' + item.value;
                    });
                    $('#partChildModel_AccesstoServices_hd').val(marr);
                }
                var selectedOptions3 = $("#partChildModel_Languagesknown option:selected");
                marr = "";
                if (selectedOptions3) {
                    $.each(selectedOptions3, function (index, item) {
                        marr += index == 0 ? item.value : ',' + item.value;
                    });
                    $('#partChildModel_Languagesknown_hd').val(marr);
                }
                var selectedOptions4 = $("#partChildModel_KnowledgeofEnglishLanguage option:selected");
                marr = "";
                if (selectedOptions4) {
                    $.each(selectedOptions4, function (index, item) {
                        marr += index == 0 ? item.value : ',' + item.value;
                    });
                    $('#partChildModel_KnowledgeofEnglishLanguage_hd').val(marr);
                }
                var selectedOptions5 = $("#partChildModel_Whichskillingcourseshaveyoudoneearlier option:selected");
                marr = "";
                if (selectedOptions5) {
                    $.each(selectedOptions5, function (index, item) {
                        marr += index == 0 ? item.value : ',' + item.value;
                    });
                    $('#partChildModel_Whichskillingcourseshaveyoudoneearlier_hd').val(marr);
                }
                //var formData = new FormData(this);
                //var formData = $(this).serialize();
                var valdata = $("#formchildid").serialize();
                 if (isvalid) {
                     $.ajax({
                         type: "POST",
                         url: document.baseURI + "/Participant/AddParticipant/",
                         dataType: 'json',
                         contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                         data: valdata,
                         //data: formData,
                         //processData: false, // Tell jQuery not to process the data
                         //contentType: false, // Tell jQuery not to set content type
                         //use contentType, processData for sure.
                         //contentType: false,
                         // processData: false,
                        // dataType: 'json',
                         //contentType: "application/json; charset=utf-8",
                         success: function (resp) {
                             //  CreateToasterMessage("Registration", resp.Message, resp.StatusType);
                             if (resp.StatusType == "success") {
                                 toastr.success("Success", resp.Message);
                                 //jQuery.event.trigger("ajaxStop");
                                 if ('@Model.partChildModel.Child_ParticipantId_pk' == '@Guid.Empty') {
                                     window.location.href = document.baseURI + "/Participant/AddParticipant?Id=" + '@Model.partChildModel.ParticipantId'
                                     $("#formchildid")[0].reset();
                                     BindStateList("partChildModel_StateId", 0, false);
                                 }
                             }
                             else {
                                 toastr.error("Error", resp.Message);
                             }
                         },
                         error: function (req, error) {
                             if (error === 'error') { error = req.statusText; }
                             var errormsg = 'There was a communication error: ' + error;
                             // CreateToasterMessage("Error", errormsg, "error");
                             toastr.error("Error", errormsg);
                             //jQuery.event.trigger("ajaxStop");
                             return false;
                         }
                     });
                 }
                 else {
                     //CreateToasterMessage("Error", "All Record Validate !!", "error");
                     toastr.error("Error", "All Record Validate !!");
                    // jQuery.event.trigger("ajaxStop");
                     return false;
                 }
             });


        });


        function setTwoNumberDecimal(event) {
            if (this.value != null) {
                this.value = parseFloat(this.value).toFixed(2);
            }
        }

    </script>
}
