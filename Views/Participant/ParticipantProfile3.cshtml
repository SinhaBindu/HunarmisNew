@using Hunarmis.Manager
@{
    ViewBag.Title = "Participant Profile";

    var dt = SPManager.SP_Dashboard_TopLegend();

    //var dtGraph = SPManager.SP_Dashboard_Graphs();

}
@using Hunarmis.Helpers
<style>
        body {
            background: #F5F5F5 !important;
            height: 100vh;
        }

        img {
            width: 100%;
            height: auto
        }

        .bgr-icon {
            width: 26px;
            margin-top: -4px
        }

        .dashboard-box {
            margin: 15px 15px 5px;
            display: flex;
            gap: 2%;
            flex-wrap: wrap;
        }

        .d-box {
            flex-basis: 23.4%;
            border-radius: 6px;
            background: #fff;
            padding-bottom: 12px;
            margin-bottom: 10px;
            box-shadow: 0rem 0.3125rem 0.3125rem 0rem rgba(82, 63, 105, 0.05);
        }

            .d-box p, .txt-white p {
                float: right;
                margin: 13px 10px 0 0;
                font-size: 22px;
                padding: 6px 10px;
                color: #242424;
                width: 45px;
                text-align: center;
                border-radius: 6px;
            }

            .d-box h3 {
                margin: 15px 10px 19px;
                font-size: 30px;
                color: #495057;
            }

            .d-box span {
                padding-left: 10px;
                font-size: 14px;
                color: #9E9AA3;
                text-transform: uppercase;
            }

        .dbg1 {
            background: #8673F6
        }

        .dbg2 {
            background: #6A4566
        }

        .dbg3 {
            background: #4397C7
        }

        .dbg4 {
            background: #D89428
        }

        .dbg5 {
            background: #4765CA
        }

        .bgr1 {
            background: #E5E2F6;
            color: #8A77F4 !important
        }

        .bgr2 {
            background: #D6F0ED;
            color: #3EB7A1 !important
        }

        .bgr3 {
            background: #DAECFA;
            color: #299CDB !important;
        }

        .bgr4 {
            background: #FFF2DB;
            color: #F7B84B !important;
        }

        .bgr5 {
            background: #DBE0EF;
            color: #405189 !important;
        }

        .data-box-1, .data-box-2, .data-box-3 {
            display: flex;
            gap: 25px;
            margin: 0 15px 15px;
        }

        .boxe {
            background: #fff;
            border-radius: 10px;
            flex: 1;
            box-shadow: 0rem 0.3125rem 0.3125rem 0rem rgba(82, 63, 105, 0.05);
        }

        .data-box-1 h2, .data-box-2 h2, .data-box-3 h2 {
            font-size: 19px;
            font-weight: bold;
            text-transform: capitalize;
            color: #6A4566;
            padding: 0 15px
        }

        .data-box-1 p, .data-box-2 p, .data-box-3 p {
            padding: 0 15px;
        }

        .flx2 {
            flex: 2
        }

        .flx1 {
            flex: 1
        }

        .tabber {
            float: right;
            background: #F4F4F4;
            border-radius: 20px;
            margin-top: -6px;
        }

            .tabber a {
                display: inline-block;
                padding: 12px 14px;
                color: #000000;
                font-weight: normal;
                font-size: 14px;
            }

        .act {
            background: #8A77F4;
            color: #fff !important;
            border-radius: 20px;
        }

        .navbar-top-links > li > a:not(.mainnav-toggle) > i {
            color: #040404
        }

        #page-head {
            display: none;
        }

        #navbar-container {
            background-color: #fff;
        }

        .navbar-top-links > li > a {
            color: #040404;
            border-left: 1px solid #ECF0F5 !important;
        }

        .navbar-top-links .tgl-menu-btn > a, .navbar-top-links .tgl-menu-btn > a:hover {
            color: #040404;
        }

            .navbar-top-links .tgl-menu-btn > a:focus {
                color: #040404;
            }

        .navbar-top-links:first-child {
            margin-left: 0px !important;
        }

        .navbar-top-links .tgl-menu-btn > a, .navbar-top-links .tgl-menu-btn > a:hover {
            color: #040404;
        }

        #container .badge:not(.badge-default) {
            color: #040404;
        }

        .navbar-top-links > .open > a, .navbar-top-links > .open > a:focus {
            background: #8A77F4 !important
        }

        .navbar-top-links > li > a:hover {
            background: #8A77F4 !important
        }

        .navbar-brand {
            padding: 0 5px;
        }

        .dashboard-title {
            font-size: 24px;
            position: absolute;
            top: 13px;
            z-index: 999;
            left: 55px;
            color: #5A3653
        }

        .brand-text {
            color: #454845;
            margin-left: 10px;
        }

        .navbar-header:before {
            background: #fff !important
        }

        .count-box {
            display: flex;
            margin-left: 10px
        }

        .d-box .count-box h3 {
            margin: 15px 2px 19px;
        }

        .form-box-select {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0px 10px;
        }


        .highcharts-label text {
            color: #fff !important;
            font-size: 12px !important;
            font-weight: 500 !important;
            fill: #333 !important;
        }
        .highcharts-text-outline {
            stroke: none !important;
            fill: #000 !important;
        }
        .highcharts-legend-item text {
            color: #000 !important;
            font-size: 12px !important;
            font-weight: normal !important;
            fill: #000 !important;
        }

        .highcharts-axis-labels text {
            color: #000 !important;
            font-size: 12px !important;
            font-weight: normal !important;
            fill: #000 !important;
        }
        .card-box .f-26, .card-box .f-14 {
            color: #fff;
        }

        .main-content-card {
            border-radius: 10px;
            box-shadow: 5px 5px 1px rgb(0 0 0 / 8%);
        }
        .bg-light-primary {
            background: #fff !important;
        }
        .bg-light-secondary {
            background: #fff !important;
        }
        .bg-light-tertiary {
            background: #fff !important;
        }
        .bg-light-ifno {
            background: #fff !important;
        }
        .flex-shrink-0 {
            align-items: center;
            display: flex;
            height: 60px;
            justify-content: center;
            width: 60px;
            border-radius: 15% 35%;
            -webkit-box-shadow: 5px 5px 1px rgb(0 0 0 / 8%);
            box-shadow: 5px 5px 1px rgb(0 0 0 / 8%);
        }
        .flex-shrink-0 {
            align-items: center;
            display: flex;
            justify-content: center;
            font-size: 50px;
            background-color: #ffffff69;
            text-align: center;
            border-radius: 0 3px 3px 0;
            position: absolute;
            min-width: 76px;
            right: 0;
            top: 0;
            bottom: 0;
            height: 100%;
        }
        .nano-content .profile-wrap {
            padding: 10px !important;
            font-size: 18px;
            color: #fff;
            border-top: none;
            border-bottom: none;
            font-weight: 600;
            line-height: 22px;
            background: -webkit-linear-gradient(270deg, #9b318f, #d11dbc) !important;
            background: linear-gradient(270deg, #9b318f, #d11dbc) !important;
        }
        .nano-content .semi-titles {
            font-size: 14px;
            color: #f1f1f1;
            font-weight: 500;
        }
        .bg-light-primary {
            color: #fff !important;
            background-color: RGBA(242, 79, 124) !important;
        }
        .bg-light-secondary {
            color: #fff !important;
            background-color: RGBA(113, 108, 176) !important;
        }
        .bg-light-tertiary {
            color: #fff !important;
            background-color: RGBA(51, 176, 224) !important;
        }
        .text-bg-info {
            color: #fff !important;
            background-color: RGBA(59, 192, 195) !important;
        }
        .main-content-card:before {
            content: none;
        }
    #footer, .bootom-fixed {
        background: linear-gradient(270deg, #9b318f, #d11dbc) !important;
        height: 43px;
    }
</style>
<div class="container-fluid">
    <div class="row mt-20">
        @if (dt != null && dt.Rows.Count > 0)
        {
            <div class="col-xs-12 col-sm-6 col-md-3">
                <div class="card card-box p-0 main-content-card bg-light-primary">
                    <div class="card-body" style="padding:15px;">
                        <div class="d-flex justify-content-between">
                            <div>
                                <div class="d-flex gap-2">
                                    <h5 class="f-14">Enrollments</h5>
                                </div>
                                <h3 class="f-26 count">@dt.Rows[0]["Enrollments"]</h3>
                            </div>
                            <div class="flex-shrink-0">
                                @*<img src="~/Content/images/enrollment.png" alt="Enrollments" />*@
                                <i class="fa fa-pencil-square-o"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-3">
                <div class="card card-box p-0 main-content-card bg-light-secondary">
                    <div class="card-body" style="padding:15px;">
                        <div class="d-flex justify-content-between">
                            <div>
                                <div class="d-flex gap-2">
                                    <h5 class="f-14">Training Completions</h5>
                                </div>
                                <h3 class="f-26 count">@dt.Rows[0]["TrainingCompletions"]</h3>
                            </div>
                            <div class="flex-shrink-0">
                                @*<img src="~/Content/images/trainign.png" alt="Training Completions" />*@
                                <i class="fa fa-newspaper-o" aria-hidden="true"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-3">
                <div class="card card-box p-0 main-content-card bg-light-tertiary">
                    <div class="card-body" style="padding:15px;">
                        <div class="d-flex justify-content-between">
                            <div>
                                <div class="d-flex gap-2">
                                    <h5 class="f-14">Learners certified</h5>
                                </div>
                                <h3 class="f-26 count">@dt.Rows[0]["LearnersCertified"]</h3>
                            </div>
                            <div class="flex-shrink-0">
                                @*<img src="~/Content/images/certified.png" alt="Learners certified" />*@
                                <i class="fa fa-certificate"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-xs-12 col-sm-6 col-md-3">
                <div class="card card-box p-0 main-content-card text-bg-info">
                    <div class="card-body" style="padding:15px;">
                        <div class="d-flex justify-content-between">
                            <div>
                                <div class="d-flex gap-2">
                                    <h5 class="f-14">Placements</h5>
                                </div>
                                <h3 class="f-26 count">@dt.Rows[0]["Placements"]</h3>
                            </div>
                            <div class="flex-shrink-0 ">
                                <i class="fa fa-recycle"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="row">
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
            <div class="card card-box p-0">
                <div class="card-head">
                    <div class="title">Age Group</div>
                    <div class="tools">

                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-xs-12 col-md-12">
                            <figure class="highcharts-figure">
                                <div id="parent-container">
                                    <div id="containerSection4_AgeGroup"></div>
                                </div>
                            </figure>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
            <div class="card card-box p-0">
                <div class="card-head">
                    <div class="title">Location</div>
                    <div class="tools">

                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-xs-12 col-md-12">
                            <figure class="highcharts-figure">
                                <div id="parent-container">
                                    <div id="containerSection4_Location"></div>
                                </div>
                            </figure>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
            <div class="card card-box p-0">
                <div class="card-head">
                    <div class="title">Average No. of Family Members per household</div>
                    <div class="tools">
                        <select id="ddlSection5FamilyMembers" class="form-control form-control-custom">
                        </select>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-xs-12 col-md-12">
                            <figure class="highcharts-figure">
                                <div id="parent-container">
                                    <div id="containerSection5_FamilyMembers"></div>
                                </div>
                            </figure>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-6 col-md-6 col-sm-6 col-xs-12">
            <div class="card card-box p-0">
                <div class="card-head">
                    <div class="title">Average Annual Household Income</div>
                    <div class="tools">
                        <select id="ddlSection5AnnualHousehold" class="form-control form-control-custom">
                        </select>
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-xs-12 col-md-12">
                            <figure class="highcharts-figure">
                                <div id="parent-container">
                                    <div id="containerSection5_AnnualHousehold"></div>
                                </div>
                            </figure>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12">
            <div class="card card-box p-0">
                <div class="card-head">
                    <div class="title">Educational Qualification</div>
                    <div class="tools">
                    </div>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-xs-12 col-md-12">
                            <figure class="highcharts-figure">
                                <div id="parent-container">
                                    <div id="containerSection5_Qualification"></div>
                                </div>
                            </figure>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
@*<div style="padding: 0px 20px 20px;">
        <div style="font-size: 21px; color: #6a4566; font-weight: 700;">
            Participant Profile
        </div>
        <hr style="border: 4px double #f9841b; margin: 0px; " />
    </div>*@
<script src="https://code.highcharts.com/highcharts.js"></script>

<script>
    $('.count').each(function () {
        $(this).prop('Counter', 0).animate({
            Counter: $(this).text()
        }, {
            duration: 4000,
            easing: 'swing',
            step: function (now) {
                $(this).text(Math.ceil(now));
            }
        });
    });

    $(document).ready(function () {
        $('.tab-btn').on('click', function () {
            $('.tab-btn').removeClass('act');
            $(this).addClass('act');
        })


        $("#ddlSection1").change(function (e) {
            if ($(this).val() == 'Location') {
                $('#figureSection1_Course').hide();
                $('#figureSection1_Location').show();
            } else {
                $('#figureSection1_Course').show();
                $('#figureSection1_Location').hide();
            }
        });

        $("#ddlSection2").change(function (e) {
            if ($(this).val() == 'Location') {
                $('#figureSection2_Course').hide();
                $('#figureSection2_Location').show();
            } else {
                $('#figureSection2_Course').show();
                $('#figureSection2_Location').hide();
            }
        });

        $("#ddlSection3").change(function (e) {
            if ($(this).val() == 'Location') {
                $('#figureSection3_Course').hide();
                $('#figureSection3_Location').show();
            } else {
                $('#figureSection3_Course').show();
                $('#figureSection3_Location').hide();
            }
        });

        $("#ddlSection5FamilyMembers").change(function (e) {
            Section5FamilyMembers($(this).val());
        });
        $("#ddlSection5AnnualHousehold").change(function (e) {
            Section5AnnualHousehold($(this).val());
        });

        //section1();
        //section2();
        //section3();
        section4();
        section5();
    });

    function escapeRegExp(str) {
        return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
    }

    function replaceAll(str, find, replace) {
        return str.replace(new RegExp(escapeRegExp(find), 'g'), replace);
    }

    function section1() {
        $.ajax({
            url: '@Url.Action("GetDashboard", "home")',
            data: { mode: 1 },
            async: false,
            success: function (result) {
                console.log(result);
                if (result.IsSuccess) {
                    var data = JSON.parse(result.Data)[0];

                    Graph(JSON.parse(data.CourseJsonData), 'containerSection1_Course', 'column', '', 'Course', '', 'CourseName');
                    Graph(JSON.parse(data.LocationJsonData), 'containerSection1_Location','column', '', 'Location', '', 'DistrictName');

                }
            }
        });
    }

    function section2() {
        $.ajax({
            url: '@Url.Action("GetDashboard", "home")',
            data: { mode: 2 },

            async: false,
            success: function (result) {
                console.log(result);
                if (result.IsSuccess) {
                    var data = JSON.parse(result.Data)[0];

                    Graph(JSON.parse(data.CourseJsonData), 'containerSection2_Course', 'stack-bar', '', 'Course', '', 'CourseName', 'Gender');
                    Graph(JSON.parse(data.LocationJsonData), 'containerSection2_Location', 'stack-bar', '', 'Location', '', 'DistrictName', 'Gender');
                }
            }
        });
    }

    function section3() {
        $.ajax({
            url: '@Url.Action("GetDashboard", "home")',
            data: { mode: 3},
            async: false,
            success: function (result) {
                console.log(result);
                if (result.IsSuccess) {
                    var data = JSON.parse(result.Data)[0];
                    Graph(JSON.parse(data.CourseJsonData), 'containerSection3_Course', 'column-group', '', 'Course', '', 'CourseName', 'Gender');
                    Graph(JSON.parse(data.LocationJsonData), 'containerSection3_Location', 'column-group', '', 'Location', '', 'DistrictName', 'Gender');
                }
            }
        });
    }

    function section4() {
        $.ajax({
            url: '@Url.Action("GetDashboard", "home")',
            data: { mode: 4},
            async: false,
            success: function (result) {
                console.log(result);
                if (result.IsSuccess) {
                    var data = JSON.parse(result.Data)[0];
                    Graph(JSON.parse(data.AgeGroupJsonData), 'containerSection4_AgeGroup', 'column-group', '', 'Age', '', 'AgeRange', 'Gender');
                    Graph(JSON.parse(data.LocationJsonData), 'containerSection4_Location', 'pie', '', 'Location', '', 'DistrictName', '');
                }
            }
        });
    }
    familyMembersJsonDataSection5 = [];
    annualHouseholdJsonDataSection5 = [];
    function section5() {
        $.ajax({
            url: '@Url.Action("GetDashboard", "home")',
            data: { mode: 5},
            async: false,
            success: function (result) {
                console.log(result);
                if (result.IsSuccess) {
                    var data = JSON.parse(result.Data)[0];

                    familyMembersJsonDataSection5 = JSON.parse(data.FamilyMembersJsonData);
                    var familyMemberDistricts = [...new Set(familyMembersJsonDataSection5.map(item => item.DistrictName))];
                    var familyMemberSelectedDistrict = familyMemberDistricts[0];
                    var ddlSection5FamilyMembers = $('#ddlSection5FamilyMembers');
                    $.each(familyMemberDistricts, function (index, text) {
                        ddlSection5FamilyMembers.append($('<option></option>').val(text).html(text));
                    });
                    ddlSection5FamilyMembers.val(familyMemberSelectedDistrict);
                    Section5FamilyMembers(familyMemberSelectedDistrict);

                    annualHouseholdJsonDataSection5 = JSON.parse(data.AnnualHouseholdJsonData);
                    var annualHouseholdDistricts = [...new Set( annualHouseholdJsonDataSection5.map(item => item.DistrictName))];
                    var annualHouseholdSelectedDistrict =  annualHouseholdDistricts[0];
                    var ddlSection5AnnualHousehold = $('#ddlSection5AnnualHousehold');
                    $.each(annualHouseholdDistricts, function (index, text) {
                        ddlSection5AnnualHousehold.append($('<option></option>').val(text).html(text));
                    });
                    ddlSection5AnnualHousehold.val(annualHouseholdSelectedDistrict);
                    Section5AnnualHousehold(annualHouseholdSelectedDistrict);


                    Graph(JSON.parse(data.QualificationJsonData), 'containerSection5_Qualification', 'pie', '', 'Qualification', '', 'QualificationName', '');




                }
            }
        });
    }

    function Section5FamilyMembers(selectedDistrict) {

        var familyMembersJsonData = familyMembersJsonDataSection5.filter(x => x.DistrictName == selectedDistrict);
        Graph(familyMembersJsonData, 'containerSection5_FamilyMembers', 'column-group', '', 'Location', '', 'NoofFamilyMembers', 'DistrictName');
    }
    function Section5AnnualHousehold(selectedDistrict) {

        var annualHouseholdJsonData = annualHouseholdJsonDataSection5.filter(x => x.DistrictName == selectedDistrict);
        Graph(annualHouseholdJsonData, 'containerSection5_AnnualHousehold', 'column-group', '', 'Location', '', 'AnnualHouseholdincome', 'DistrictName');

    }

    function Graph(jsonData, selector, graphType ='column', title, xAxis, yAxis, property, groupProperty) {
        console.log(jsonData);
        var data = [];
        var categories = [];
        var series = [];
        var totals = [];
        var originalGraphType = graphType;
        if (graphType == 'bar-group') {
            graphType = 'bar';

            categories = [...new Set(jsonData.map(item => item[property]))];
            const groups = [...new Set(jsonData.map(item => item[groupProperty]))];

            series = groups.map(key => ({
                name: key,
                data: categories.map(category => {
                    const item = jsonData.find(d => d[property] === category && d[groupProperty] === key);
                    return item ? item.Total : null;
                })
            }));

        }
        else if (graphType == 'stack-bar') {
            graphType = 'bar';
            // Prepare the series data
            const seriesData = {};
            categories = jsonData.map(item => item[property]);
            jsonData.forEach(item => {
                if (!seriesData[item[groupProperty]]) {
                    seriesData[item[groupProperty]] = [];
                }
                seriesData[item.Gender].push({
                    name: item[property],
                    y: item.Total,
                    percentage: item.Percentage
                });
            });

            // Convert series data into Highcharts format
            series = Object.keys(seriesData).map(gender => ({
                name: gender,
                data: seriesData[gender]
            }));

            // Calculate total per course
            totals = {};
            jsonData.forEach(item => {
                if (!totals[item[property]]) {
                    totals[item[property]] = 0;
                }
                totals[item[property]] += item.Total;
            });

            console.log(totals);
        }
        else if(graphType == 'column-group') {
            graphType = 'column';


            categories = [...new Set(jsonData.map(item => item[property]))];
            const groups = [...new Set(jsonData.map(item => item[groupProperty]))];

            series = groups.map(key => ({
                name: key,
                data: categories.map(category => {
                    const item = jsonData.find(d => d[property] === category && d[groupProperty] === key);
                    return item ? item.Total : null;
                })
            }));
            console.log(series);
        }
        else if (graphType == 'pie') {

            categories = jsonData.map(item => item[property]);
            const totals = jsonData.map(item => item.Total);

            var seriesData = jsonData.map(item => ({
                name: item[property],
                y: item.Percentage,
                total: item.Total // Add total to each data point
            }));
            series = [{
                name: 'Percentage',
                colorByPoint: true,
                data: seriesData
            }];

            console.log(series);
        }
        else {

            categories = jsonData.map(item => item[property]);
            const totals = jsonData.map(item => item.Total);

            series = [{
                showInLegend: false,
                name: property,
                data: totals
            }];
            console.log(series);
        }

        //for (var i = 0; i < jsonData.length; i++) {
        //    data.push({
        //        name: jsonData[i][property],
        //        y: jsonData[i].Total
        //    });
        //}
        colors = ['#6a4566', '#f24f7c', '#716cb0', '#33b0e0', '#3bc0c3', '#e6ce00', '#03c6f9', '#3a08c6'];
        Highcharts.chart(selector, {
            chart: {
                type: graphType,
                backgroundColor: 'rgba(0,0,0,0)',
                color: '#fff',
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false,
                innerSize: '50%' // Make it a donut chart
            },
            title: {
                text: title,
                align: 'left',
                style: {

                    //display: 'none'
                }
            },
            credits: {
                enabled: false
            },
            plotOptions: {
                series: {
                    stacking: originalGraphType=='stack-bar' ? 'normal' : null,
                    shadow: false,
                    borderRadius: graphType == 'pie'?'0%':'40%',
                    borderWidth: 0,
                    dataLabels: {
                        enabled: true,
                        format: '{point.y:.0f}',
                        inside: originalGraphType == 'stack-bar', // Set this to false to place labels outside
                        crop: originalGraphType == 'stack-bar', // Prevent labels from being cropped
                        overflow: 'none', // Prevent labels from overflowing the chart area
                        format: '{point.y:.0f}',
                        //formatter: function () {
                        //    // Automatically place labels inside or outside
                        //    if (this.y < 25) { // Threshold (you can adjust this)
                        //        return `<span style="color:black;">${this.y}</span>`;
                        //    } else {
                        //        return `<span style="color:white;">${this.y}</span>`;
                        //    }
                        //},
                        style: {
                            fontSize: 12,
                            borderWidth: 0
                            //display: 'none'
                        }
                    },

                },
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '{point.name}: {point.y}%'
                    },
                    showInLegend: true
                },
                //column: {
                //    dataLabels: {
                //        enabled: true,
                //        inside: false,
                //        formatter: function () {
                //            return this.y;
                //        }
                //    }
                //}
            },
            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                //pointFormat: '<span style="color:{point.color}">{point.name}</span>: ' +               '<b>{point.y:.0f}</b><br/>'
                formatter: function () {
                    console.log(this);
                    // Check if point.total is not null or undefined
                    const value = this.point.options && this.point.options.total
                        ? this.point.options.total
                        : this.point.y;

                    return `<span style="font-size:12px;color:${this.color}">${this.series.name ? this.series.name : this.point.name}</span><br/>` +
                        `<span style="color:${this.point.color}">${this.point.name ? this.point.name : this.x}</span>: ` +
                        `<b style="color:${this.color}">${value}</b><br/>`;
                }
            },
            colors: colors,
            xAxis: {
                categories: categories,
                labels: {
                    //style: {
                    //    fontSize: 12
                    //},
                },
            },
            yAxis: {
                visible: false,
                labels: {
                    style: {
                        //fontSize: 12
                        display: 'none'
                    },
                },
                title: {
                    text: yAxis,
                    //style: {
                    //    fontSize: 12
                    //},
                },
                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        color: ( // theme
                            Highcharts.defaultOptions.title.style &&
                            Highcharts.defaultOptions.title.style.color
                        ) || 'gray'
                    },
                    formatter: function () {
                        console.log(this)
                        return this.total;
                    }
                }
            },
            series: series
        });

    }

    function genderGraph() {
        @*jsonData = JSON.parse(replaceAll('@dtGraph.Rows[0]["GenderJsonData"]', '&quot;', '"'));*@
        jsonData = [];
        console.log(jsonData);
        var data = [];
        for (var i = 0; i < jsonData.length; i++) {
            data.push([jsonData[i].Gender, jsonData[i].Total, jsonData[i].Percentage]);
        }

        chart = Highcharts.chart('containerGender', {
            title: {
                text: 'Gender',
                align: 'center',
                style: {
                    display: 'none'
                }
            },
            credits: {
                enabled: false
            },
            //subtitle: {
            //    useHTML: true,
            //    text: getSubtitle(),
            //    floating: true,
            //    verticalAlign: 'middle',
            //    y: 30
            //},
            legend: {
                enabled: true
            },
            //tooltip: {
            //    valueDecimals: 0,
            //    valueSuffix: ' Participaints'
            //},
            tooltip: {
                headerFormat: '<span style="font-size:11px">{series.name}</span><br>',
                pointFormat: '<span style="color:{point.color}">{point.name}</span>: ' +
                    '<b>{point.y:.2f}({point.percentage:.2f}%)</b> of total<br/>'
            },
            plotOptions: {
                series: {
                    borderWidth: 0,
                    colorByPoint: true,
                    type: 'pie',
                    size: '100%',
                    //borderRadius: '50%',
                    innerSize: '50%',
                    dataLabels: {
                        enabled: true,
                        crop: false,
                        distance: '-10%',
                        style: {
                            fontWeight: 'bold',
                            fontSize: '16px'
                        },
                        connectorWidth: 0
                    }
                }
            },
            colors: ['#ea599f', '#6ec9ee', '#8a80bc'],
            series: [
                {
                type: 'pie',
                    name: 'Gender',
                    data: data
                }
            ]
        });

    }





</script>
